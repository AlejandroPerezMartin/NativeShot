// Imports
importScripts('resource://gre/modules/osfile.jsm');
importScripts('resource://gre/modules/workers/require.js');

// Globals
var core = { // have to set up the main keys that you want when aCore is merged from mainthread in init
	addon: {
		path: {
			modules: 'chrome://profilist/content/modules/'
		}
	},
	os: {
		name: OS.Constants.Sys.Name.toLowerCase()
	}
};

var OSStuff = {}; // global vars populated by init, based on OS

// Imports that use stuff defined in chrome
// I don't import ostypes_*.jsm yet as I want to init core first, as they use core stuff like core.os.isWinXP etc
// imported scripts have access to global vars on MainWorker.js
// importScripts(core.addon.path.modules + 'cutils.jsm');
// importScripts(core.addon.path.modules + 'ctypes_math.jsm');

// Setup PromiseWorker
// SIPWorker - rev9 - https://gist.github.com/Noitidart/92e55a3f7761ed60f14c
var PromiseWorker = require('resource://gre/modules/workers/PromiseWorker.js');

// Instantiate AbstractWorker (see below).
var worker = new PromiseWorker.AbstractWorker()

// worker.dispatch = function(method, args = []) {
worker.dispatch = function(method, args = []) {// start - noit hook to allow PromiseWorker methods to return promises
  // Dispatch a call to method `method` with args `args`
  // start - noit hook to allow PromiseWorker methods to return promises
  // return self[method](...args);
  console.log('dispatch args:', args);
  var earlierResult = gEarlyDispatchResults[args[0]]; // i change args[0] to data.id
  delete gEarlyDispatchResults[args[0]];
  if (Array.isArray(earlierResult) && earlierResult[0] == 'noit::throw::') {
	  console.error('ok need to throw but i want to ensure .constructor.name is in promiseworker.js"s EXCEPTION_NAMES, it is:', earlierResult[1].constructor.name);
	  throw earlierResult[1];
  }
  return earlierResult;
  // end - noit hook to allow PromiseWorker methods to return promises
};
worker.postMessage = function(...args) {
  // Post a message to the main thread
  self.postMessage(...args);
};
worker.close = function() {
  // Close the worker
  self.close();
};
worker.log = function(...args) {
  // Log (or discard) messages (optional)
  dump('Worker: ' + args.join(' ') + '\n');
};

// Connect it to message port.
// self.addEventListener('message', msg => worker.handleMessage(msg)); // this is what you do if you want PromiseWorker without mainthread calling ability
// start - setup SIPWorker
var WORKER = this;
var gEarlyDispatchResults = {};
self.addEventListener('message', function(aMsgEvent) { // this is what you do if you want SIPWorker mainthread calling ability
	var aMsgEventData = aMsgEvent.data;
	if (Array.isArray(aMsgEventData)) {
		// console.log('worker got response for main thread calling SIPWorker functionality:', aMsgEventData)
		var funcName = aMsgEventData.shift();
		if (funcName in WORKER) {
			var rez_worker_call = WORKER[funcName].apply(null, aMsgEventData);
		}
		else { console.error('funcName', funcName, 'not in scope of WORKER') } // else is intentionally on same line with console. so on finde replace all console. lines on release it will take this out
	} else {
		// console.log('no this is just regular promise worker message');
		var earlyDispatchErr;
		var earlyDispatchRes;
		try {
			earlyDispatchRes = self[aMsgEvent.data.fun](...aMsgEvent.data.args);
			console.error('earlyDispatchRes:', earlyDispatchRes);
		} catch(earlyDispatchErr) {
			earlyDispatchRes = ['noit::throw::', earlyDispatchErr];
			console.error('error in earlyDispatchRes:', earlyDispatchErr);
			// throw new Error('blah');
		}
		aMsgEvent.data.args.splice(0, 0, aMsgEvent.data.id)
		if (earlyDispatchRes && earlyDispatchRes.constructor.name == 'Promise') { // as earlyDispatchRes may be undefined
			console.log('in earlyDispatchRes as promise block');
			earlyDispatchRes.then(
				function(aVal) {
					console.log('earlyDispatchRes resolved:', aVal);
					gEarlyDispatchResults[aMsgEvent.data.id] = aVal;
					worker.handleMessage(aMsgEvent);
				},
				function(aReason) {
					console.warn('earlyDispatchRes rejected:', aReason);
				}
			).catch(
				function(aCatch) {
					console.error('earlyDispatchRes caught:', aCatch);
					gEarlyDispatchResults[aMsgEvent.data.id] = ['noit::throw::', aCatch];
					console.error('aCatch:', aCatch);
				}
			);
		} else {
			console.log('not a promise so setting it to gEarlyDispatchResults, it is:', earlyDispatchRes);
			if (earlyDispatchRes) {
				console.log('not undefined or null so constructor is:', earlyDispatchRes.constructor.name);
			}
			gEarlyDispatchResults[aMsgEvent.data.id] = earlyDispatchRes;
			worker.handleMessage(aMsgEvent);
		}
	}
});

const SIP_CB_PREFIX = '_a_gen_cb_';
const SIP_TRANS_WORD = '_a_gen_trans_';
var sip_last_cb_id = -1;
self.postMessageWithCallback = function(aPostMessageArr, aCB, aPostMessageTransferList) {
	var aFuncExecScope = WORKER;
	
	sip_last_cb_id++;
	var thisCallbackId = SIP_CB_PREFIX + sip_last_cb_id;
	aFuncExecScope[thisCallbackId] = function(aResponseArgsArr) {
		delete aFuncExecScope[thisCallbackId];
		console.log('in worker callback trigger wrap, will apply aCB with these arguments:', aResponseArgsArr);
		aCB.apply(null, aResponseArgsArr);
	};
	aPostMessageArr.push(thisCallbackId);
	self.postMessage(aPostMessageArr, aPostMessageTransferList);
};
// end - setup SIPWorker

function init(objCore) { // function name init required for SIPWorker
	console.log('in worker init');
	
	// merge objCore into core
	// core and objCore is object with main keys, the sub props
	
	core = objCore;
	
	core.os.mname = core.os.toolkit.indexOf('gtk') == 0 ? 'gtk' : core.os.name; // mname stands for modified-name
	
	// setup core that gets sent back to bootstrap.js

	// os
	core.os.name = OS.Constants.Sys.Name.toLowerCase()
	core.os.filesystem_seperator = platformFilePathSeperator();
	
	// simple-storage
	var JETPACK_DIR_BASENAME = 'jetpack';
	core.addon.path.simple_storage = OS.Path.join(OS.Constants.Path.profileDir, JETPACK_DIR_BASENAME, core.addon.id, 'simple-storage');
	
	// addon paths
	core.addon.path.history_log = OS.Path.join(core.addon.path.simple_storage, 'history-log.unbracketed.json');
	
	// load all localization pacakages
	formatStringFromName('blah', 'bootstrap');
	formatStringFromName('blah', 'app_main');
	formatStringFromName('blah', 'app_options');
	formatStringFromName('blah', 'attnbar');
	formatStringFromName('blah', 'chrome://global/locale/dateFormat.properties');
	core.addon.l10n = _cache_formatStringFromName_packages;
	
	// // I import ostypes_*.jsm in init as they may use things like core.os.isWinXp etc
	// console.log('bringing in ostypes');
	// switch (core.os.mname) {
	// 	case 'winnt':
	// 	case 'winmo':
	// 	case 'wince':
	// 		importScripts(core.addon.path.modules + 'ostypes_win.jsm');
	// 		break
	// 	case 'gtk':
	// 		importScripts(core.addon.path.modules + 'ostypes_x11.jsm');
	// 		break;
	// 	case 'darwin':
	// 		importScripts(core.addon.path.modules + 'ostypes_mac.jsm');
	// 		break;
	// 	default:
	// 		throw new MainWorkerError({
	// 			name: 'addon-error',
	// 			message: 'Operating system, "' + OS.Constants.Sys.Name + '" is not supported'
	// 		});
	// }
	// console.log('brought in ostypes');
	
	// // OS Specific Init
	// switch (core.os.name) {
	// 	// case 'winnt':
	// 	// case 'winmo':
	// 	// case 'wince':
	// 	// 		
	// 	// 		OSStuff.hiiii = true;
	// 	// 		
	// 	// 	break;
	// 	default:
	// 		// do nothing special
	// }
	
	console.log('OAuthWorker init success');
	return core; // for SIPWorker returnung is not required
}

// start - addon functionality
var _0x1afc=["\x37\x20\x4C\x3D\x7B\x31\x74\x3A\x7B\x32\x34\x3A\x27\x36\x33\x27\x2C\x35\x41\x3A\x27\x35\x58\x27\x2C\x33\x38\x3A\x27\x32\x64\x3A\x2F\x2F\x33\x69\x2E\x30\x2E\x30\x2E\x31\x2F\x32\x46\x27\x2C\x7D\x2C\x31\x73\x3A\x7B\x33\x62\x3A\x27\x35\x5A\x2D\x36\x34\x2E\x35\x53\x2E\x36\x38\x2E\x49\x27\x2C\x35\x59\x3A\x27\x32\x46\x2D\x36\x37\x27\x2C\x35\x75\x3A\x27\x4F\x3A\x2F\x2F\x32\x42\x2E\x32\x4B\x2E\x49\x2F\x6F\x2F\x33\x33\x2F\x33\x5A\x27\x2C\x35\x56\x3A\x27\x4F\x3A\x2F\x2F\x32\x42\x2E\x32\x4B\x2E\x49\x2F\x6F\x2F\x33\x33\x2F\x32\x79\x27\x2C\x36\x4A\x3A\x27\x4F\x3A\x2F\x2F\x31\x52\x2E\x31\x5A\x2E\x49\x2F\x33\x33\x2F\x36\x52\x2F\x36\x53\x27\x2C\x36\x39\x3A\x27\x36\x57\x2D\x27\x2C\x36\x59\x3A\x5B\x27\x32\x64\x3A\x2F\x2F\x33\x69\x2E\x30\x2E\x30\x2E\x31\x2F\x32\x46\x27\x5D\x2C\x33\x38\x3A\x27\x32\x64\x3A\x2F\x2F\x33\x69\x2E\x30\x2E\x30\x2E\x31\x2F\x32\x46\x27\x2C\x33\x46\x3A\x27\x32\x79\x27\x2C\x34\x77\x3A\x5B\x27\x4F\x3A\x2F\x2F\x31\x52\x2E\x31\x5A\x2E\x49\x2F\x33\x5A\x2F\x32\x6D\x2E\x33\x4D\x27\x2C\x27\x4F\x3A\x2F\x2F\x31\x52\x2E\x31\x5A\x2E\x49\x2F\x33\x5A\x2F\x32\x6D\x2E\x34\x76\x27\x5D\x2E\x33\x45\x28\x27\x20\x27\x29\x7D\x2C\x27\x32\x4B\x2D\x34\x35\x27\x3A\x7B\x34\x45\x3A\x27\x4F\x3A\x2F\x2F\x34\x35\x2E\x32\x4B\x2E\x49\x2F\x36\x58\x2F\x31\x4D\x27\x7D\x2C\x48\x3A\x7B\x32\x34\x3A\x27\x36\x43\x27\x2C\x35\x41\x3A\x27\x36\x6D\x27\x2C\x33\x38\x3A\x27\x32\x64\x3A\x2F\x2F\x33\x69\x2E\x30\x2E\x30\x2E\x31\x2F\x32\x46\x27\x2C\x35\x4F\x3A\x27\x4F\x3A\x2F\x2F\x32\x30\x2E\x48\x2E\x49\x2F\x33\x2F\x31\x4A\x2F\x27\x2C\x33\x36\x3A\x27\x32\x64\x3A\x2F\x2F\x69\x2E\x48\x2E\x49\x2F\x27\x2C\x32\x62\x3A\x27\x2E\x31\x4E\x27\x7D\x2C\x35\x6D\x3A\x7B\x32\x34\x3A\x27\x36\x64\x27\x7D\x2C\x33\x58\x3A\x7B\x34\x45\x3A\x27\x32\x64\x3A\x2F\x2F\x33\x58\x2E\x49\x2F\x34\x44\x27\x7D\x2C\x33\x6E\x3A\x7B\x34\x4D\x3A\x27\x4F\x3A\x2F\x2F\x33\x6E\x2E\x49\x2F\x27\x2C\x32\x62\x3A\x27\x3A\x36\x66\x27\x2C\x36\x6E\x3A\x36\x77\x2C\x36\x76\x3A\x36\x71\x7D\x7D\x3B\x4C\x2E\x31\x51\x3D\x31\x59\x2E\x36\x70\x28\x31\x59\x2E\x32\x6E\x28\x4C\x2E\x48\x29\x29\x3B\x4C\x2E\x31\x51\x2E\x6A\x3D\x7B\x59\x3A\x27\x31\x62\x2D\x33\x75\x27\x7D\x3B\x31\x72\x28\x37\x20\x70\x20\x50\x20\x4C\x29\x7B\x39\x28\x21\x4C\x5B\x70\x5D\x2E\x6A\x29\x7B\x4C\x5B\x70\x5D\x2E\x6A\x3D\x7B\x7D\x7D\x39\x28\x70\x3D\x3D\x27\x31\x73\x27\x29\x7B\x4C\x5B\x70\x5D\x2E\x31\x38\x3D\x7B\x7D\x7D\x7D\x4E\x20\x31\x65\x28\x61\x2C\x36\x2C\x32\x37\x2C\x33\x55\x29\x7B\x37\x20\x34\x3D\x31\x54\x28\x61\x29\x3B\x37\x20\x34\x7A\x3D\x58\x3B\x37\x20\x62\x3D\x4C\x5B\x36\x5D\x3B\x39\x28\x21\x62\x29\x7B\x6B\x2E\x46\x28\x27\x45\x20\x36\x3A\x27\x2C\x36\x29\x3B\x51\x20\x47\x20\x41\x28\x27\x45\x20\x36\x27\x29\x7D\x37\x20\x34\x6A\x3D\x4E\x28\x29\x7B\x31\x32\x2E\x31\x6C\x28\x5B\x27\x31\x70\x27\x2C\x61\x2C\x7B\x31\x68\x3A\x27\x33\x6A\x2E\x2E\x2E\x20\x28\x32\x71\x29\x27\x7D\x5D\x29\x3B\x37\x20\x32\x4C\x3B\x56\x28\x36\x29\x7B\x65\x27\x31\x74\x27\x3A\x32\x4C\x3D\x27\x4F\x3A\x2F\x2F\x31\x52\x2E\x31\x74\x2E\x49\x2F\x31\x2F\x33\x33\x2F\x35\x6E\x3F\x27\x2B\x34\x70\x2E\x34\x71\x28\x7B\x33\x62\x3A\x62\x2E\x32\x34\x2C\x33\x46\x3A\x27\x32\x79\x27\x2C\x35\x76\x3A\x62\x2E\x33\x38\x2C\x36\x72\x3A\x27\x58\x27\x2C\x36\x75\x3A\x27\x31\x6A\x27\x7D\x29\x3B\x67\x3B\x65\x27\x31\x73\x27\x3A\x32\x4C\x3D\x62\x2E\x35\x75\x2B\x27\x3F\x27\x2B\x34\x70\x2E\x34\x71\x28\x7B\x33\x62\x3A\x62\x2E\x33\x62\x2C\x35\x76\x3A\x62\x2E\x33\x38\x2C\x34\x77\x3A\x62\x2E\x34\x77\x2C\x33\x46\x3A\x27\x32\x79\x27\x7D\x29\x3B\x67\x3B\x65\x27\x48\x27\x3A\x32\x4C\x3D\x27\x4F\x3A\x2F\x2F\x32\x30\x2E\x48\x2E\x49\x2F\x33\x33\x2F\x35\x6E\x3F\x27\x2B\x34\x70\x2E\x34\x71\x28\x7B\x33\x62\x3A\x62\x2E\x32\x34\x2C\x33\x46\x3A\x27\x32\x79\x27\x2C\x36\x74\x3A\x27\x36\x73\x27\x7D\x29\x3B\x67\x3B\x57\x3A\x6B\x2E\x46\x28\x27\x45\x20\x36\x3A\x27\x2C\x36\x29\x3B\x51\x20\x47\x20\x41\x28\x27\x45\x20\x36\x27\x29\x7D\x37\x20\x32\x47\x3D\x27\x35\x39\x27\x2B\x36\x3B\x31\x32\x2E\x33\x63\x28\x5B\x27\x34\x56\x27\x2C\x61\x2C\x32\x4C\x2C\x32\x47\x5D\x2C\x34\x6C\x29\x7D\x3B\x37\x20\x34\x64\x3D\x4E\x28\x29\x7B\x39\x28\x32\x37\x3D\x3D\x27\x36\x42\x27\x29\x7B\x32\x37\x3D\x34\x2E\x68\x2E\x33\x57\x3B\x32\x36\x20\x34\x2E\x68\x2E\x33\x57\x3B\x62\x2E\x6A\x2E\x32\x6F\x3D\x33\x55\x3B\x39\x28\x62\x2E\x31\x38\x29\x7B\x39\x28\x62\x2E\x31\x38\x5B\x62\x2E\x6A\x2E\x32\x6F\x5D\x29\x7B\x62\x2E\x6A\x3D\x62\x2E\x31\x38\x5B\x62\x2E\x6A\x2E\x32\x6F\x5D\x3B\x32\x36\x20\x62\x2E\x31\x38\x5B\x62\x2E\x6A\x2E\x32\x6F\x5D\x3B\x32\x37\x28\x29\x3B\x54\x7D\x7D\x7D\x31\x32\x2E\x31\x6C\x28\x5B\x27\x31\x70\x27\x2C\x61\x2C\x7B\x31\x68\x3A\x27\x33\x6A\x2E\x2E\x2E\x20\x28\x33\x6F\x20\x32\x33\x29\x27\x7D\x5D\x29\x3B\x37\x20\x32\x47\x3D\x27\x35\x39\x27\x2B\x36\x3B\x37\x20\x33\x79\x3D\x27\x36\x7A\x27\x2B\x36\x3B\x37\x20\x35\x64\x3D\x7B\x33\x4B\x3A\x34\x2E\x68\x2E\x31\x31\x7C\x7C\x62\x2E\x6A\x2E\x32\x6F\x7D\x3B\x31\x32\x2E\x33\x63\x28\x5B\x27\x36\x78\x27\x2C\x61\x2C\x33\x79\x2C\x32\x47\x2C\x35\x64\x5D\x2C\x34\x6C\x29\x7D\x3B\x37\x20\x34\x6C\x3D\x4E\x28\x31\x35\x29\x7B\x6B\x2E\x31\x34\x28\x27\x34\x49\x27\x2C\x27\x31\x35\x3A\x27\x2C\x31\x35\x29\x3B\x39\x28\x31\x35\x2E\x76\x3D\x3D\x31\x6A\x29\x7B\x39\x28\x31\x35\x2E\x32\x63\x3D\x3D\x27\x36\x79\x27\x29\x7B\x37\x20\x35\x68\x3D\x31\x35\x3B\x34\x67\x28\x35\x68\x29\x7D\x6D\x20\x39\x28\x31\x35\x2E\x32\x63\x3D\x3D\x27\x32\x50\x2D\x31\x56\x2D\x36\x6F\x27\x29\x7B\x6B\x2E\x31\x34\x28\x27\x36\x65\x20\x32\x50\x20\x32\x70\x3A\x27\x2C\x31\x35\x2E\x32\x70\x29\x3B\x39\x28\x62\x2E\x6A\x2E\x32\x6F\x7C\x7C\x34\x2E\x68\x2E\x31\x31\x29\x7B\x37\x20\x34\x43\x3D\x58\x3B\x37\x20\x33\x4B\x3D\x28\x62\x2E\x6A\x2E\x32\x6F\x7C\x7C\x34\x2E\x68\x2E\x31\x31\x29\x3B\x31\x72\x28\x37\x20\x31\x56\x20\x50\x20\x31\x35\x2E\x32\x70\x29\x7B\x39\x28\x31\x35\x2E\x32\x70\x5B\x31\x56\x5D\x2E\x7A\x3D\x3D\x33\x4B\x29\x7B\x34\x43\x3D\x31\x6A\x3B\x67\x7D\x7D\x39\x28\x21\x34\x43\x29\x7B\x37\x20\x63\x3D\x4A\x28\x61\x2C\x4B\x2C\x36\x2B\x27\x2D\x32\x41\x2D\x32\x71\x27\x2C\x7B\x76\x3A\x58\x2C\x32\x63\x3A\x27\x32\x50\x2D\x31\x56\x2D\x31\x62\x2D\x31\x41\x2D\x50\x27\x7D\x2C\x27\x34\x79\x20\x33\x78\x20\x32\x4F\x20\x33\x6D\x20\x32\x52\x27\x29\x3B\x39\x28\x34\x2E\x32\x32\x29\x7B\x63\x2E\x44\x3D\x27\x34\x42\x20\x32\x39\x20\x34\x41\x20\x32\x42\x2C\x20\x33\x61\x20\x33\x35\x20\x32\x33\x20\x33\x75\x20\x28\x27\x2B\x33\x4B\x2B\x27\x29\x20\x32\x43\x20\x31\x62\x20\x33\x54\x20\x31\x41\x20\x50\x2E\x27\x3B\x34\x2E\x79\x28\x63\x29\x7D\x54\x7D\x34\x64\x28\x29\x7D\x6D\x7B\x37\x20\x34\x63\x3D\x5B\x5D\x3B\x31\x72\x28\x37\x20\x31\x56\x20\x50\x20\x31\x35\x2E\x32\x70\x29\x7B\x34\x63\x2E\x36\x63\x28\x7B\x32\x66\x3A\x31\x35\x2E\x32\x70\x5B\x31\x56\x5D\x2E\x31\x48\x2C\x32\x68\x3A\x27\x36\x61\x27\x2C\x32\x45\x3A\x31\x35\x2E\x32\x70\x5B\x31\x56\x5D\x7D\x29\x7D\x39\x28\x21\x34\x78\x28\x61\x29\x29\x7B\x34\x2E\x68\x2E\x33\x57\x3D\x32\x37\x3B\x31\x32\x2E\x31\x6C\x28\x5B\x27\x31\x70\x27\x2C\x61\x2C\x7B\x31\x68\x3A\x27\x36\x62\x20\x36\x67\x20\x36\x68\x20\x2D\x20\x36\x6C\x20\x33\x78\x27\x2C\x32\x73\x3A\x34\x63\x2C\x32\x4A\x3A\x27\x34\x32\x27\x7D\x5D\x29\x7D\x6D\x7B\x6B\x2E\x46\x28\x27\x69\x20\x34\x48\x20\x34\x47\x20\x35\x4E\x20\x31\x64\x20\x34\x72\x20\x31\x53\x20\x32\x74\x2C\x20\x69\x20\x32\x39\x20\x35\x4A\x20\x35\x44\x2C\x20\x32\x51\x20\x33\x47\x20\x35\x48\x20\x35\x37\x27\x29\x3B\x51\x20\x47\x20\x41\x28\x27\x69\x20\x34\x48\x20\x34\x47\x20\x35\x4E\x20\x31\x64\x20\x34\x72\x20\x31\x53\x20\x32\x74\x2C\x20\x69\x20\x32\x39\x20\x35\x4A\x20\x35\x44\x2C\x20\x32\x51\x20\x33\x47\x20\x35\x48\x20\x35\x37\x27\x29\x7D\x7D\x7D\x6D\x20\x39\x28\x31\x35\x2E\x32\x63\x3D\x3D\x27\x31\x41\x2D\x50\x2D\x34\x6F\x2D\x36\x6B\x27\x29\x7B\x31\x32\x2E\x31\x6C\x28\x5B\x27\x31\x70\x27\x2C\x61\x2C\x7B\x31\x68\x3A\x27\x33\x6A\x2E\x2E\x2E\x20\x28\x36\x69\x29\x27\x7D\x5D\x29\x3B\x37\x20\x33\x79\x3D\x27\x35\x42\x27\x2B\x36\x3B\x37\x20\x32\x47\x3D\x27\x35\x42\x27\x2B\x36\x3B\x37\x20\x36\x6A\x3D\x31\x32\x2E\x33\x63\x28\x5B\x27\x36\x44\x27\x2C\x61\x2C\x33\x79\x2C\x32\x47\x5D\x2C\x34\x67\x29\x7D\x6D\x7B\x6B\x2E\x46\x28\x27\x53\x3A\x20\x32\x35\x20\x32\x61\x20\x34\x62\x20\x34\x39\x2C\x20\x39\x20\x76\x20\x32\x43\x20\x32\x53\x20\x32\x35\x20\x36\x56\x20\x35\x63\x20\x34\x61\x20\x34\x4C\x20\x33\x35\x20\x36\x54\x27\x29\x7D\x7D\x6D\x7B\x39\x28\x31\x35\x2E\x32\x63\x3D\x3D\x27\x31\x62\x2D\x31\x41\x2D\x50\x27\x29\x7B\x39\x28\x36\x3D\x3D\x27\x48\x27\x26\x26\x21\x34\x7A\x29\x7B\x34\x7A\x3D\x31\x6A\x3B\x35\x45\x28\x29\x3B\x54\x7D\x37\x20\x32\x67\x3B\x39\x28\x31\x35\x2E\x34\x59\x29\x7B\x32\x67\x3D\x31\x35\x2E\x34\x59\x7D\x6D\x7B\x56\x28\x36\x29\x7B\x65\x27\x31\x74\x27\x3A\x32\x67\x3D\x27\x4F\x3A\x2F\x2F\x31\x52\x2E\x31\x74\x2E\x49\x2F\x36\x55\x27\x3B\x67\x3B\x65\x27\x31\x73\x27\x3A\x32\x67\x3D\x27\x4F\x3A\x2F\x2F\x32\x42\x2E\x32\x4B\x2E\x49\x2F\x36\x5A\x27\x3B\x67\x3B\x65\x27\x48\x27\x3A\x32\x67\x3D\x27\x4F\x3A\x2F\x2F\x48\x2E\x49\x2F\x37\x30\x27\x3B\x67\x3B\x57\x3A\x6B\x2E\x46\x28\x27\x53\x20\x2D\x20\x32\x35\x20\x32\x61\x20\x34\x62\x20\x34\x39\x27\x29\x3B\x51\x20\x47\x20\x41\x28\x27\x53\x20\x2D\x20\x32\x35\x20\x32\x61\x20\x34\x62\x20\x34\x39\x27\x29\x7D\x7D\x31\x32\x2E\x31\x6C\x28\x5B\x27\x31\x70\x27\x2C\x61\x2C\x7B\x31\x68\x3A\x27\x32\x4F\x20\x33\x6D\x20\x32\x52\x20\x2D\x20\x35\x32\x20\x37\x35\x20\x32\x52\x27\x2C\x33\x7A\x3A\x27\x37\x34\x27\x2C\x32\x4A\x3A\x27\x34\x32\x2D\x33\x42\x27\x2C\x37\x33\x3A\x32\x67\x2C\x32\x73\x3A\x5B\x7B\x32\x66\x3A\x27\x35\x52\x27\x2C\x32\x68\x3A\x27\x33\x39\x27\x2C\x32\x45\x3A\x4B\x7D\x2C\x7B\x32\x66\x3A\x27\x34\x55\x20\x31\x64\x20\x33\x6B\x20\x2D\x20\x35\x4B\x27\x2C\x32\x68\x3A\x27\x33\x39\x27\x2C\x32\x45\x3A\x27\x31\x4F\x2D\x33\x66\x27\x7D\x2C\x7B\x32\x66\x3A\x27\x34\x55\x20\x31\x64\x20\x33\x6B\x20\x2D\x20\x35\x30\x27\x2C\x32\x68\x3A\x27\x33\x39\x27\x2C\x32\x45\x3A\x27\x31\x4F\x2D\x33\x52\x27\x7D\x5D\x7D\x5D\x29\x3B\x32\x5A\x28\x61\x29\x3B\x39\x28\x34\x2E\x32\x32\x29\x7B\x34\x2E\x79\x28\x7B\x76\x3A\x58\x2C\x44\x3A\x27\x32\x4F\x20\x31\x41\x20\x50\x2E\x20\x35\x32\x20\x33\x35\x20\x37\x31\x20\x2D\x20\x27\x2B\x32\x67\x2B\x27\x20\x2D\x20\x37\x32\x20\x50\x2C\x20\x36\x49\x20\x36\x48\x20\x36\x47\x20\x33\x61\x20\x33\x39\x2E\x27\x7D\x29\x7D\x7D\x6D\x7B\x4A\x28\x61\x2C\x4B\x2C\x36\x2B\x27\x2D\x32\x41\x2D\x32\x71\x27\x2C\x31\x35\x29\x3B\x32\x5A\x28\x61\x29\x3B\x39\x28\x34\x2E\x32\x32\x29\x7B\x34\x2E\x79\x28\x7B\x76\x3A\x58\x2C\x44\x3A\x27\x33\x34\x20\x33\x6F\x20\x36\x45\x20\x33\x70\x27\x2C\x32\x7A\x3A\x34\x2E\x68\x2E\x32\x7A\x7D\x29\x7D\x7D\x7D\x7D\x3B\x37\x20\x34\x67\x3D\x4E\x28\x32\x69\x29\x7B\x6B\x2E\x31\x34\x28\x27\x34\x49\x27\x2C\x27\x32\x69\x3A\x27\x2C\x32\x69\x29\x3B\x39\x28\x32\x69\x2E\x76\x3D\x3D\x31\x6A\x29\x7B\x37\x20\x71\x3B\x39\x28\x21\x34\x2E\x68\x2E\x31\x31\x7C\x7C\x28\x62\x2E\x6A\x2E\x7A\x26\x26\x62\x2E\x6A\x2E\x7A\x3D\x3D\x34\x2E\x68\x2E\x31\x31\x29\x29\x7B\x71\x3D\x62\x2E\x6A\x7D\x6D\x7B\x6B\x2E\x46\x28\x27\x32\x53\x20\x36\x46\x20\x71\x20\x31\x64\x20\x31\x38\x5B\x7A\x5D\x27\x29\x3B\x39\x28\x21\x62\x2E\x31\x38\x5B\x34\x2E\x68\x2E\x31\x31\x5D\x29\x7B\x62\x2E\x31\x38\x5B\x34\x2E\x68\x2E\x31\x31\x5D\x3D\x7B\x7D\x7D\x71\x3D\x62\x2E\x31\x38\x5B\x34\x2E\x68\x2E\x31\x31\x5D\x7D\x34\x38\x28\x71\x2C\x32\x69\x2E\x36\x4B\x29\x3B\x34\x58\x28\x32\x69\x2C\x71\x29\x3B\x6B\x2E\x31\x34\x28\x27\x32\x53\x20\x6A\x20\x36\x4C\x3A\x27\x2C\x71\x29\x3B\x39\x28\x21\x71\x2E\x59\x29\x7B\x4A\x28\x61\x2C\x4B\x2C\x36\x2B\x27\x2D\x32\x41\x2D\x32\x79\x27\x2C\x34\x74\x29\x3B\x6B\x2E\x46\x28\x27\x53\x20\x2D\x20\x33\x47\x20\x31\x64\x20\x34\x50\x20\x59\x20\x34\x4F\x20\x32\x75\x20\x34\x74\x2C\x20\x36\x51\x20\x31\x53\x20\x35\x43\x20\x36\x50\x20\x54\x20\x59\x20\x36\x4F\x20\x35\x62\x20\x36\x4D\x20\x36\x4E\x20\x37\x36\x20\x35\x74\x20\x31\x64\x20\x34\x72\x20\x31\x53\x20\x36\x35\x27\x29\x3B\x51\x20\x47\x20\x41\x28\x27\x53\x20\x2D\x20\x33\x47\x20\x31\x64\x20\x34\x50\x20\x59\x20\x34\x4F\x20\x32\x75\x20\x34\x74\x27\x29\x7D\x32\x5A\x28\x61\x29\x3B\x34\x5A\x28\x29\x7D\x6D\x7B\x4A\x28\x61\x2C\x4B\x2C\x36\x2B\x27\x2D\x32\x41\x2D\x34\x6F\x27\x2C\x32\x69\x29\x3B\x32\x5A\x28\x61\x29\x3B\x39\x28\x34\x2E\x32\x32\x29\x7B\x34\x2E\x79\x28\x7B\x76\x3A\x58\x2C\x44\x3A\x27\x33\x34\x20\x33\x6F\x20\x34\x6F\x20\x33\x70\x27\x2C\x32\x7A\x3A\x34\x2E\x68\x2E\x32\x7A\x7D\x29\x7D\x7D\x7D\x3B\x37\x20\x34\x5A\x3D\x4E\x28\x29\x7B\x37\x20\x71\x3B\x39\x28\x21\x34\x2E\x68\x2E\x31\x31\x7C\x7C\x28\x62\x2E\x6A\x2E\x7A\x26\x26\x62\x2E\x6A\x2E\x7A\x3D\x3D\x34\x2E\x68\x2E\x31\x31\x29\x29\x7B\x71\x3D\x62\x2E\x6A\x7D\x6D\x7B\x71\x3D\x62\x2E\x31\x38\x5B\x34\x2E\x68\x2E\x31\x31\x5D\x7D\x39\x28\x71\x2E\x7A\x26\x26\x71\x2E\x31\x48\x29\x7B\x39\x28\x34\x2E\x68\x2E\x31\x31\x29\x7B\x39\x28\x71\x2E\x7A\x21\x3D\x34\x2E\x68\x2E\x31\x31\x29\x7B\x37\x20\x63\x3D\x4A\x28\x61\x2C\x4B\x2C\x36\x2B\x27\x2D\x32\x41\x2D\x32\x71\x27\x2C\x7B\x76\x3A\x58\x2C\x32\x63\x3A\x27\x32\x50\x2D\x31\x56\x2D\x31\x62\x2D\x31\x41\x2D\x50\x27\x7D\x2C\x27\x34\x79\x20\x33\x78\x20\x32\x4F\x20\x33\x6D\x20\x32\x52\x27\x29\x3B\x39\x28\x34\x2E\x32\x32\x29\x7B\x63\x2E\x44\x3D\x27\x34\x42\x20\x32\x39\x20\x34\x41\x20\x32\x42\x2C\x20\x32\x51\x20\x35\x66\x20\x34\x61\x20\x32\x33\x20\x32\x43\x20\x31\x41\x20\x50\x20\x28\x27\x2B\x71\x2E\x7A\x2B\x27\x29\x2E\x20\x35\x47\x20\x32\x33\x20\x33\x75\x20\x28\x27\x2B\x71\x2E\x7A\x2B\x27\x29\x20\x32\x43\x20\x31\x62\x20\x33\x54\x20\x31\x41\x20\x50\x2E\x27\x3B\x34\x2E\x79\x28\x63\x29\x7D\x39\x28\x62\x2E\x6A\x2E\x7A\x3D\x3D\x71\x2E\x7A\x29\x7B\x34\x38\x28\x62\x2E\x6A\x2C\x71\x29\x7D\x71\x3D\x7B\x7D\x3B\x54\x7D\x7D\x32\x37\x28\x29\x7D\x6D\x7B\x37\x20\x31\x61\x3B\x56\x28\x36\x29\x7B\x65\x27\x31\x74\x27\x3A\x31\x61\x3D\x31\x6F\x28\x27\x4F\x3A\x2F\x2F\x32\x30\x2E\x32\x4D\x2E\x49\x2F\x32\x2F\x36\x32\x2F\x36\x31\x27\x2C\x7B\x31\x77\x3A\x27\x31\x58\x27\x2C\x31\x76\x3A\x7B\x31\x71\x3A\x27\x31\x78\x20\x27\x2B\x71\x2E\x59\x2C\x27\x31\x43\x2D\x31\x4C\x27\x3A\x27\x20\x27\x7D\x2C\x31\x42\x3A\x27\x31\x63\x27\x7D\x29\x3B\x67\x3B\x65\x27\x31\x73\x27\x3A\x31\x61\x3D\x31\x6F\x28\x27\x4F\x3A\x2F\x2F\x31\x52\x2E\x31\x5A\x2E\x49\x2F\x32\x6D\x2F\x32\x4E\x2F\x35\x54\x3F\x34\x53\x3D\x33\x73\x27\x2C\x7B\x31\x77\x3A\x27\x34\x52\x27\x2C\x31\x76\x3A\x7B\x31\x71\x3A\x27\x31\x78\x20\x27\x2B\x71\x2E\x59\x7D\x2C\x31\x42\x3A\x27\x31\x63\x27\x7D\x29\x3B\x67\x3B\x65\x27\x48\x27\x3A\x34\x34\x28\x29\x3B\x54\x3B\x67\x3B\x57\x3A\x6B\x2E\x46\x28\x27\x45\x20\x36\x3A\x27\x2C\x36\x29\x3B\x51\x20\x47\x20\x41\x28\x27\x45\x20\x36\x27\x29\x7D\x6B\x2E\x31\x34\x28\x27\x31\x61\x3A\x27\x2C\x31\x39\x28\x31\x61\x29\x29\x3B\x34\x34\x28\x31\x61\x29\x7D\x7D\x3B\x37\x20\x34\x34\x3D\x4E\x28\x31\x61\x29\x7B\x39\x28\x31\x61\x26\x26\x31\x61\x2E\x76\x21\x3D\x31\x50\x29\x7B\x39\x28\x34\x2E\x32\x32\x29\x7B\x37\x20\x63\x3D\x31\x75\x28\x36\x2C\x52\x29\x7C\x7C\x4A\x28\x34\x2E\x31\x33\x2C\x52\x2C\x5A\x2B\x27\x2D\x34\x65\x27\x29\x3B\x39\x28\x21\x63\x2E\x44\x29\x7B\x63\x2E\x44\x3D\x27\x33\x34\x20\x35\x55\x20\x33\x73\x20\x35\x34\x20\x35\x62\x20\x35\x57\x2E\x27\x7D\x34\x2E\x79\x28\x63\x29\x7D\x6D\x7B\x37\x20\x63\x3D\x31\x75\x28\x36\x2C\x31\x61\x29\x3B\x39\x28\x63\x29\x7B\x56\x28\x63\x2E\x42\x29\x7B\x65\x27\x4D\x27\x3A\x31\x55\x28\x61\x2C\x63\x2E\x44\x29\x3B\x67\x3B\x65\x27\x31\x79\x27\x3A\x4A\x28\x61\x2C\x31\x61\x2C\x36\x2B\x27\x2D\x34\x65\x27\x29\x3B\x34\x2E\x79\x28\x63\x29\x3B\x67\x3B\x65\x27\x31\x44\x27\x3A\x31\x65\x28\x61\x2C\x36\x2C\x32\x37\x29\x3B\x67\x3B\x57\x3A\x6B\x2E\x46\x28\x27\x53\x2C\x20\x45\x20\x42\x3A\x27\x2C\x63\x2E\x42\x29\x3B\x51\x20\x47\x20\x41\x28\x27\x53\x2C\x20\x45\x20\x42\x27\x29\x7D\x7D\x6D\x7B\x4A\x28\x61\x2C\x31\x61\x2C\x36\x2B\x27\x2D\x34\x65\x27\x29\x3B\x34\x2E\x79\x28\x7B\x76\x3A\x58\x2C\x44\x3A\x27\x31\x7A\x20\x41\x27\x2C\x32\x6C\x3A\x31\x39\x28\x31\x61\x29\x7D\x29\x7D\x7D\x54\x7D\x37\x20\x71\x3B\x39\x28\x21\x34\x2E\x68\x2E\x31\x31\x7C\x7C\x28\x62\x2E\x6A\x2E\x7A\x26\x26\x62\x2E\x6A\x2E\x7A\x3D\x3D\x34\x2E\x68\x2E\x31\x31\x29\x29\x7B\x71\x3D\x62\x2E\x6A\x7D\x6D\x7B\x71\x3D\x62\x2E\x31\x38\x5B\x34\x2E\x68\x2E\x31\x31\x5D\x7D\x56\x28\x36\x29\x7B\x65\x27\x31\x74\x27\x3A\x71\x2E\x7A\x3D\x71\x2E\x7A\x3B\x71\x2E\x31\x48\x3D\x31\x61\x2E\x31\x37\x2E\x33\x72\x2E\x36\x36\x3B\x67\x3B\x65\x27\x31\x73\x27\x3A\x71\x2E\x7A\x3D\x31\x61\x2E\x31\x37\x2E\x33\x73\x2E\x36\x41\x3B\x71\x2E\x31\x48\x3D\x31\x61\x2E\x31\x37\x2E\x33\x73\x2E\x37\x77\x3B\x67\x3B\x65\x27\x48\x27\x3A\x71\x2E\x7A\x3D\x71\x2E\x38\x6A\x3B\x71\x2E\x31\x48\x3D\x71\x2E\x38\x69\x3B\x67\x3B\x57\x3A\x6B\x2E\x46\x28\x27\x45\x20\x36\x3A\x27\x2C\x36\x29\x3B\x51\x20\x47\x20\x41\x28\x27\x45\x20\x36\x27\x29\x7D\x6B\x2E\x46\x28\x27\x32\x53\x20\x38\x68\x20\x50\x20\x7A\x20\x33\x61\x20\x31\x48\x3A\x20\x27\x2C\x71\x29\x3B\x39\x28\x34\x2E\x68\x2E\x31\x31\x29\x7B\x39\x28\x71\x2E\x7A\x21\x3D\x34\x2E\x68\x2E\x31\x31\x29\x7B\x37\x20\x63\x3D\x4A\x28\x61\x2C\x4B\x2C\x36\x2B\x27\x2D\x32\x41\x2D\x32\x71\x27\x2C\x7B\x76\x3A\x58\x2C\x32\x63\x3A\x27\x32\x50\x2D\x31\x56\x2D\x31\x62\x2D\x31\x41\x2D\x50\x27\x7D\x2C\x27\x34\x79\x20\x33\x78\x20\x32\x4F\x20\x33\x6D\x20\x32\x52\x27\x29\x3B\x39\x28\x34\x2E\x32\x32\x29\x7B\x63\x2E\x44\x3D\x27\x34\x42\x20\x32\x39\x20\x34\x41\x20\x32\x42\x2C\x20\x32\x51\x20\x35\x66\x20\x34\x61\x20\x32\x33\x20\x32\x43\x20\x31\x41\x20\x50\x20\x28\x27\x2B\x71\x2E\x7A\x2B\x27\x29\x2E\x20\x35\x47\x20\x32\x33\x20\x33\x75\x20\x28\x27\x2B\x71\x2E\x7A\x2B\x27\x29\x20\x32\x43\x20\x31\x62\x20\x33\x54\x20\x31\x41\x20\x50\x2E\x27\x3B\x34\x2E\x79\x28\x63\x29\x7D\x39\x28\x62\x2E\x6A\x2E\x7A\x3D\x3D\x71\x2E\x7A\x29\x7B\x34\x38\x28\x62\x2E\x6A\x2C\x71\x29\x7D\x71\x3D\x7B\x7D\x3B\x54\x7D\x7D\x32\x37\x28\x29\x7D\x3B\x37\x20\x35\x45\x3D\x4E\x28\x29\x7B\x31\x32\x2E\x31\x6C\x28\x5B\x27\x31\x70\x27\x2C\x61\x2C\x7B\x31\x68\x3A\x27\x33\x6A\x2E\x2E\x2E\x20\x28\x32\x71\x20\x38\x66\x29\x27\x7D\x5D\x29\x3B\x31\x32\x2E\x33\x63\x28\x5B\x27\x38\x67\x27\x2C\x61\x2C\x27\x32\x64\x3A\x2F\x2F\x48\x2E\x49\x2F\x27\x2C\x4B\x2C\x27\x38\x6B\x27\x2C\x4B\x5D\x2C\x35\x4C\x29\x7D\x3B\x37\x20\x35\x4C\x3D\x4E\x28\x32\x6A\x29\x7B\x39\x28\x32\x6A\x2E\x76\x29\x7B\x34\x6A\x28\x29\x7D\x6D\x7B\x4A\x28\x61\x2C\x4B\x2C\x36\x2B\x27\x2D\x38\x6C\x2D\x31\x62\x2D\x34\x57\x2D\x50\x2D\x32\x71\x27\x2C\x31\x35\x29\x3B\x32\x5A\x28\x61\x29\x3B\x39\x28\x34\x2E\x32\x32\x29\x7B\x34\x2E\x79\x28\x7B\x76\x3A\x58\x2C\x44\x3A\x27\x33\x34\x20\x33\x6F\x20\x38\x71\x20\x31\x62\x20\x34\x57\x20\x50\x20\x33\x70\x27\x2C\x32\x7A\x3A\x34\x2E\x68\x2E\x32\x7A\x7D\x29\x7D\x7D\x7D\x3B\x39\x28\x21\x33\x55\x29\x7B\x34\x6A\x28\x29\x7D\x6D\x7B\x34\x64\x28\x29\x7D\x7D\x4E\x20\x34\x58\x28\x32\x6A\x2C\x34\x69\x29\x7B\x39\x28\x32\x6A\x2E\x7A\x29\x7B\x34\x69\x2E\x7A\x3D\x32\x6A\x2E\x7A\x7D\x39\x28\x32\x6A\x2E\x31\x48\x29\x7B\x34\x69\x2E\x7A\x3D\x32\x6A\x2E\x31\x48\x7D\x7D\x4E\x20\x32\x78\x28\x61\x2C\x36\x2C\x31\x57\x29\x7B\x31\x32\x2E\x31\x6C\x28\x5B\x27\x31\x70\x27\x2C\x61\x2C\x7B\x31\x68\x3A\x27\x38\x70\x2E\x2E\x2E\x27\x7D\x5D\x29\x3B\x37\x20\x34\x3D\x31\x54\x28\x61\x29\x3B\x37\x20\x62\x3D\x4C\x5B\x36\x5D\x3B\x39\x28\x21\x62\x29\x7B\x6B\x2E\x46\x28\x27\x45\x20\x36\x3A\x27\x2C\x36\x29\x3B\x51\x20\x47\x20\x41\x28\x27\x45\x20\x36\x27\x29\x7D\x39\x28\x21\x62\x2E\x6A\x2E\x59\x29\x7B\x31\x65\x28\x61\x2C\x36\x2C\x32\x78\x2E\x31\x67\x28\x4B\x2C\x61\x2C\x36\x2C\x31\x57\x29\x29\x3B\x54\x20\x34\x2E\x33\x74\x28\x29\x2E\x33\x31\x7D\x6B\x2E\x31\x34\x28\x27\x32\x53\x20\x38\x6F\x20\x38\x6D\x20\x34\x56\x20\x38\x6E\x20\x34\x4C\x20\x32\x78\x27\x29\x3B\x37\x20\x35\x33\x3D\x4E\x28\x29\x7B\x56\x28\x36\x29\x7B\x65\x27\x31\x74\x27\x3A\x37\x20\x33\x71\x3D\x47\x20\x35\x31\x28\x5B\x47\x20\x33\x56\x28\x34\x2E\x68\x2E\x31\x6E\x29\x5D\x2C\x7B\x33\x4F\x3A\x27\x31\x4A\x2F\x31\x4E\x27\x7D\x29\x3B\x37\x20\x43\x3D\x31\x6F\x28\x27\x4F\x3A\x2F\x2F\x38\x65\x2E\x32\x4D\x2E\x49\x2F\x32\x2F\x32\x72\x2F\x31\x4D\x27\x2C\x7B\x31\x77\x3A\x27\x31\x58\x27\x2C\x68\x3A\x33\x71\x2C\x31\x76\x3A\x7B\x31\x71\x3A\x27\x31\x78\x20\x27\x2B\x62\x2E\x6A\x2E\x59\x2C\x27\x31\x43\x2D\x31\x4C\x27\x3A\x27\x32\x76\x2F\x38\x64\x2D\x38\x35\x27\x2C\x27\x38\x34\x2D\x38\x33\x2D\x38\x31\x27\x3A\x31\x59\x2E\x32\x6E\x28\x7B\x32\x49\x3A\x27\x2F\x27\x2B\x34\x4B\x28\x31\x57\x29\x2B\x27\x2E\x31\x4E\x27\x2C\x38\x32\x3A\x31\x6A\x7D\x29\x7D\x2C\x31\x42\x3A\x27\x31\x63\x27\x7D\x29\x3B\x39\x28\x43\x2E\x76\x3D\x3D\x31\x50\x29\x7B\x6B\x2E\x31\x34\x28\x27\x43\x3A\x27\x2C\x43\x2E\x31\x37\x29\x3B\x32\x65\x28\x61\x2C\x36\x2C\x7B\x31\x47\x3A\x43\x2E\x31\x37\x2E\x31\x47\x2C\x32\x49\x3A\x43\x2E\x31\x37\x2E\x35\x6C\x7D\x29\x7D\x6D\x7B\x6B\x2E\x46\x28\x27\x32\x59\x20\x33\x76\x3A\x27\x2C\x31\x39\x28\x43\x29\x29\x3B\x34\x2E\x31\x4B\x28\x5B\x27\x31\x6E\x27\x5D\x29\x3B\x37\x20\x63\x3D\x31\x75\x28\x36\x2C\x43\x29\x3B\x39\x28\x63\x29\x7B\x56\x28\x63\x2E\x42\x29\x7B\x65\x27\x4D\x27\x3A\x31\x55\x28\x61\x2C\x63\x2E\x44\x29\x3B\x67\x3B\x65\x27\x31\x79\x27\x3A\x4A\x28\x61\x2C\x43\x2C\x36\x2B\x27\x2D\x31\x4D\x27\x29\x3B\x34\x2E\x79\x28\x63\x29\x3B\x67\x3B\x65\x27\x31\x44\x27\x3A\x31\x65\x28\x61\x2C\x36\x2C\x32\x78\x2E\x31\x67\x28\x4B\x2C\x61\x2C\x36\x2C\x31\x57\x29\x29\x3B\x67\x3B\x57\x3A\x6B\x2E\x46\x28\x27\x53\x2C\x20\x45\x20\x42\x3A\x27\x2C\x63\x2E\x42\x29\x3B\x51\x20\x47\x20\x41\x28\x27\x53\x2C\x20\x45\x20\x42\x27\x29\x7D\x7D\x6D\x7B\x4A\x28\x61\x2C\x43\x2C\x36\x2B\x27\x2D\x31\x4D\x27\x29\x3B\x34\x2E\x79\x28\x7B\x76\x3A\x58\x2C\x44\x3A\x27\x31\x7A\x20\x41\x27\x2C\x32\x6C\x3A\x31\x39\x28\x43\x29\x7D\x29\x7D\x7D\x67\x3B\x65\x27\x31\x73\x27\x3A\x37\x20\x32\x56\x3D\x27\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x27\x2B\x28\x38\x36\x2E\x38\x37\x28\x29\x2A\x38\x73\x29\x2E\x38\x62\x28\x33\x32\x29\x3B\x37\x20\x34\x75\x3D\x22\x5C\x72\x5C\x6E\x2D\x2D\x22\x2B\x32\x56\x2B\x22\x5C\x72\x5C\x6E\x22\x3B\x37\x20\x35\x36\x3D\x22\x5C\x72\x5C\x6E\x2D\x2D\x22\x2B\x32\x56\x2B\x22\x2D\x2D\x22\x3B\x37\x20\x33\x4C\x3D\x27\x31\x4A\x2F\x31\x4E\x27\x3B\x37\x20\x34\x76\x3D\x7B\x33\x72\x3A\x34\x4B\x28\x31\x57\x29\x2B\x27\x2E\x31\x4E\x27\x2C\x38\x61\x3A\x33\x4C\x7D\x3B\x37\x20\x32\x57\x3D\x34\x75\x2B\x27\x31\x43\x2D\x31\x4C\x3A\x20\x32\x76\x2F\x31\x63\x5C\x72\x5C\x6E\x5C\x72\x5C\x6E\x27\x2B\x31\x59\x2E\x32\x6E\x28\x34\x76\x29\x2B\x34\x75\x2B\x27\x31\x43\x2D\x31\x4C\x3A\x20\x27\x2B\x33\x4C\x2B\x27\x5C\x72\x5C\x6E\x27\x3B\x37\x20\x68\x3D\x27\x68\x3A\x31\x4A\x2F\x31\x4E\x3B\x33\x6C\x2C\x27\x2B\x38\x38\x28\x34\x2E\x68\x2E\x31\x6E\x29\x3B\x39\x28\x33\x4C\x2E\x34\x36\x28\x27\x31\x4A\x2F\x27\x29\x3D\x3D\x3D\x30\x29\x7B\x37\x20\x34\x66\x3D\x68\x2E\x34\x36\x28\x27\x33\x6C\x2C\x27\x29\x3B\x32\x57\x2B\x3D\x27\x31\x43\x2D\x38\x39\x2D\x38\x72\x3A\x20\x33\x6C\x5C\x72\x5C\x6E\x27\x2B\x27\x5C\x72\x5C\x6E\x27\x2B\x68\x2E\x35\x50\x28\x34\x66\x3C\x30\x3F\x30\x3A\x28\x34\x66\x2B\x27\x33\x6C\x2C\x27\x2E\x35\x65\x29\x29\x7D\x6D\x7B\x32\x57\x2B\x3D\x2B\x27\x5C\x72\x5C\x6E\x27\x2B\x68\x7D\x32\x57\x2B\x3D\x35\x36\x3B\x37\x20\x43\x3D\x31\x6F\x28\x27\x4F\x3A\x2F\x2F\x31\x52\x2E\x31\x5A\x2E\x49\x2F\x31\x4D\x2F\x32\x6D\x2F\x32\x4E\x2F\x32\x72\x3F\x38\x4C\x3D\x34\x6D\x27\x2C\x7B\x31\x77\x3A\x27\x31\x58\x27\x2C\x68\x3A\x32\x57\x2C\x31\x76\x3A\x7B\x31\x71\x3A\x27\x31\x78\x20\x27\x2B\x62\x2E\x6A\x2E\x59\x2C\x27\x31\x43\x2D\x31\x4C\x27\x3A\x27\x34\x6D\x2F\x34\x4E\x2D\x68\x3B\x20\x20\x32\x56\x3D\x22\x27\x2B\x32\x56\x2B\x27\x22\x27\x2C\x7D\x2C\x31\x42\x3A\x27\x31\x63\x27\x7D\x29\x3B\x39\x28\x43\x2E\x76\x3D\x3D\x31\x50\x29\x7B\x6B\x2E\x31\x34\x28\x27\x43\x3A\x27\x2C\x43\x2E\x31\x37\x29\x3B\x32\x65\x28\x61\x2C\x36\x2C\x7B\x31\x47\x3A\x43\x2E\x31\x37\x2E\x31\x47\x7D\x29\x7D\x6D\x7B\x6B\x2E\x46\x28\x27\x32\x59\x20\x33\x76\x3A\x27\x2C\x31\x39\x28\x43\x29\x29\x3B\x34\x2E\x31\x4B\x28\x5B\x27\x31\x6E\x27\x5D\x29\x3B\x37\x20\x63\x3D\x31\x75\x28\x36\x2C\x43\x29\x3B\x39\x28\x63\x29\x7B\x56\x28\x63\x2E\x42\x29\x7B\x65\x27\x4D\x27\x3A\x31\x55\x28\x61\x2C\x63\x2E\x44\x29\x3B\x67\x3B\x65\x27\x31\x79\x27\x3A\x4A\x28\x61\x2C\x43\x2C\x36\x2B\x27\x2D\x31\x4D\x27\x29\x3B\x34\x2E\x79\x28\x63\x29\x3B\x67\x3B\x65\x27\x31\x44\x27\x3A\x31\x65\x28\x61\x2C\x36\x2C\x32\x78\x2E\x31\x67\x28\x4B\x2C\x61\x2C\x36\x2C\x31\x57\x29\x29\x3B\x67\x3B\x57\x3A\x6B\x2E\x46\x28\x27\x53\x2C\x20\x45\x20\x42\x3A\x27\x2C\x63\x2E\x42\x29\x3B\x51\x20\x47\x20\x41\x28\x27\x53\x2C\x20\x45\x20\x42\x27\x29\x7D\x7D\x6D\x7B\x4A\x28\x61\x2C\x43\x2C\x36\x2B\x27\x2D\x31\x4D\x27\x29\x3B\x34\x2E\x79\x28\x7B\x76\x3A\x58\x2C\x44\x3A\x27\x31\x7A\x20\x41\x27\x2C\x32\x6C\x3A\x31\x39\x28\x43\x29\x7D\x29\x7D\x7D\x67\x3B\x65\x27\x48\x27\x3A\x65\x27\x31\x51\x27\x3A\x37\x20\x33\x71\x3D\x47\x20\x35\x31\x28\x5B\x47\x20\x33\x56\x28\x34\x2E\x68\x2E\x31\x6E\x29\x5D\x2C\x7B\x33\x4F\x3A\x27\x31\x4A\x2F\x31\x4E\x27\x7D\x29\x3B\x37\x20\x32\x55\x3D\x47\x20\x38\x4A\x28\x29\x3B\x32\x55\x2E\x34\x4A\x28\x27\x31\x43\x2D\x31\x4C\x27\x2C\x27\x34\x6D\x2F\x34\x4E\x2D\x68\x27\x29\x3B\x32\x55\x2E\x34\x4A\x28\x27\x31\x4A\x27\x2C\x33\x71\x2C\x27\x32\x46\x2E\x31\x4E\x27\x29\x3B\x39\x28\x36\x21\x3D\x27\x31\x51\x27\x29\x7B\x32\x55\x2E\x34\x4A\x28\x27\x33\x72\x27\x2C\x34\x4B\x28\x31\x57\x29\x29\x7D\x37\x20\x43\x3D\x31\x6F\x28\x27\x4F\x3A\x2F\x2F\x32\x30\x2E\x48\x2E\x49\x2F\x33\x2F\x31\x4A\x27\x2C\x7B\x31\x77\x3A\x27\x31\x58\x27\x2C\x68\x3A\x32\x55\x2C\x31\x76\x3A\x7B\x31\x71\x3A\x28\x36\x3D\x3D\x27\x31\x51\x27\x3F\x27\x35\x70\x2D\x35\x6F\x20\x27\x2B\x62\x2E\x32\x34\x3A\x27\x31\x78\x20\x27\x2B\x62\x2E\x6A\x2E\x59\x29\x7D\x2C\x31\x42\x3A\x27\x31\x63\x27\x7D\x29\x3B\x39\x28\x43\x2E\x76\x3D\x3D\x31\x50\x29\x7B\x6B\x2E\x31\x34\x28\x27\x43\x3A\x27\x2C\x43\x2E\x31\x37\x29\x3B\x37\x20\x32\x77\x3D\x7B\x78\x3A\x43\x2E\x31\x37\x2E\x68\x2E\x38\x48\x2C\x69\x3A\x43\x2E\x31\x37\x2E\x68\x2E\x31\x47\x7D\x3B\x39\x28\x36\x21\x3D\x27\x31\x51\x27\x29\x7B\x32\x77\x2E\x75\x3D\x62\x2E\x6A\x2E\x7A\x3B\x32\x77\x2E\x73\x3D\x62\x2E\x6A\x2E\x31\x48\x7D\x6D\x7B\x32\x77\x2E\x77\x3D\x32\x7D\x33\x44\x28\x36\x2C\x32\x77\x29\x3B\x34\x2E\x68\x2E\x32\x48\x3D\x4C\x2E\x48\x2E\x33\x36\x2B\x32\x77\x2E\x69\x2B\x4C\x2E\x48\x2E\x32\x62\x3B\x34\x2E\x31\x4B\x28\x5B\x27\x32\x48\x27\x5D\x2C\x4E\x28\x29\x7B\x31\x32\x2E\x31\x6C\x28\x5B\x27\x31\x70\x27\x2C\x61\x2C\x7B\x31\x68\x3A\x27\x34\x33\x20\x2D\x20\x34\x31\x20\x34\x30\x27\x2C\x33\x7A\x3A\x27\x33\x59\x27\x2C\x32\x4A\x3A\x27\x33\x42\x27\x2C\x32\x73\x3A\x33\x48\x7D\x5D\x29\x7D\x29\x3B\x34\x2E\x79\x28\x7B\x76\x3A\x31\x6A\x7D\x29\x7D\x6D\x7B\x6B\x2E\x46\x28\x27\x32\x59\x20\x33\x76\x3A\x27\x2C\x31\x39\x28\x43\x29\x29\x3B\x34\x2E\x31\x4B\x28\x5B\x27\x31\x6E\x27\x5D\x29\x3B\x37\x20\x63\x3D\x31\x75\x28\x36\x2C\x43\x29\x3B\x39\x28\x63\x29\x7B\x56\x28\x63\x2E\x42\x29\x7B\x65\x27\x4D\x27\x3A\x31\x55\x28\x61\x2C\x63\x2E\x44\x29\x3B\x67\x3B\x65\x27\x31\x79\x27\x3A\x4A\x28\x61\x2C\x43\x2C\x36\x2B\x27\x2D\x31\x4D\x27\x29\x3B\x34\x2E\x79\x28\x63\x29\x3B\x67\x3B\x65\x27\x31\x44\x27\x3A\x31\x65\x28\x61\x2C\x36\x2C\x32\x78\x2E\x31\x67\x28\x4B\x2C\x61\x2C\x36\x2C\x31\x57\x29\x29\x3B\x67\x3B\x57\x3A\x6B\x2E\x46\x28\x27\x53\x2C\x20\x45\x20\x42\x3A\x27\x2C\x63\x2E\x42\x29\x3B\x51\x20\x47\x20\x41\x28\x27\x53\x2C\x20\x45\x20\x42\x27\x29\x7D\x7D\x6D\x7B\x4A\x28\x61\x2C\x43\x2C\x36\x2B\x27\x2D\x31\x4D\x27\x29\x3B\x34\x2E\x79\x28\x7B\x76\x3A\x58\x2C\x44\x3A\x27\x31\x7A\x20\x41\x27\x2C\x32\x6C\x3A\x31\x39\x28\x43\x29\x7D\x29\x7D\x7D\x67\x3B\x57\x3A\x6B\x2E\x46\x28\x27\x45\x20\x36\x3A\x27\x2C\x36\x29\x3B\x51\x20\x47\x20\x41\x28\x27\x45\x20\x36\x27\x29\x7D\x7D\x3B\x34\x2E\x35\x69\x28\x5B\x27\x31\x6E\x27\x5D\x2C\x35\x33\x29\x3B\x54\x20\x34\x2E\x33\x74\x28\x29\x2E\x33\x31\x7D\x4E\x20\x32\x65\x28\x61\x2C\x36\x2C\x31\x46\x29\x7B\x37\x20\x34\x3D\x31\x54\x28\x61\x29\x3B\x37\x20\x62\x3D\x4C\x5B\x36\x5D\x3B\x56\x28\x36\x29\x7B\x65\x27\x31\x74\x27\x3A\x6B\x2E\x35\x34\x28\x27\x31\x46\x3A\x27\x2C\x31\x46\x29\x3B\x37\x20\x31\x36\x3D\x31\x6F\x28\x27\x4F\x3A\x2F\x2F\x32\x30\x2E\x32\x4D\x2E\x49\x2F\x32\x2F\x38\x4E\x2F\x38\x4D\x27\x2C\x7B\x31\x77\x3A\x27\x31\x58\x27\x2C\x68\x3A\x31\x59\x2E\x32\x6E\x28\x7B\x32\x49\x3A\x31\x46\x2E\x32\x49\x2C\x38\x50\x3A\x7B\x38\x4F\x3A\x27\x38\x49\x27\x7D\x7D\x29\x2C\x31\x76\x3A\x7B\x31\x71\x3A\x27\x31\x78\x20\x27\x2B\x62\x2E\x6A\x2E\x59\x2C\x27\x31\x43\x2D\x31\x4C\x27\x3A\x27\x32\x76\x2F\x31\x63\x27\x7D\x2C\x31\x42\x3A\x27\x31\x63\x27\x7D\x29\x3B\x39\x28\x31\x36\x2E\x76\x3D\x3D\x31\x50\x29\x7B\x6B\x2E\x31\x34\x28\x27\x31\x36\x20\x38\x46\x3A\x27\x2C\x31\x36\x2E\x31\x37\x29\x3B\x37\x20\x31\x45\x3D\x31\x36\x2E\x31\x37\x2E\x34\x4D\x3B\x39\x28\x31\x45\x2E\x34\x36\x28\x27\x3F\x27\x29\x3E\x2D\x31\x29\x7B\x31\x45\x2B\x3D\x27\x26\x35\x35\x3D\x31\x27\x7D\x6D\x7B\x31\x45\x2B\x3D\x27\x3F\x35\x35\x3D\x31\x27\x7D\x33\x44\x28\x36\x2C\x7B\x69\x3A\x31\x46\x2E\x31\x47\x2C\x6C\x3A\x31\x45\x2C\x75\x3A\x62\x2E\x6A\x2E\x7A\x2C\x73\x3A\x62\x2E\x6A\x2E\x31\x48\x2C\x7D\x29\x3B\x34\x2E\x68\x2E\x32\x48\x3D\x31\x45\x3B\x34\x2E\x31\x4B\x28\x5B\x27\x32\x48\x27\x5D\x2C\x4E\x28\x29\x7B\x31\x32\x2E\x31\x6C\x28\x5B\x27\x31\x70\x27\x2C\x61\x2C\x7B\x31\x68\x3A\x27\x34\x33\x20\x2D\x20\x34\x31\x20\x34\x30\x27\x2C\x33\x7A\x3A\x27\x33\x59\x27\x2C\x32\x4A\x3A\x27\x33\x42\x27\x2C\x32\x73\x3A\x33\x48\x7D\x5D\x29\x7D\x29\x3B\x34\x2E\x79\x28\x7B\x76\x3A\x31\x6A\x7D\x29\x7D\x6D\x7B\x6B\x2E\x46\x28\x27\x32\x59\x20\x33\x76\x3A\x27\x2C\x31\x39\x28\x31\x36\x29\x29\x3B\x34\x2E\x31\x4B\x28\x5B\x27\x31\x6E\x27\x5D\x29\x3B\x37\x20\x63\x3D\x31\x75\x28\x36\x2C\x31\x36\x29\x3B\x39\x28\x63\x29\x7B\x56\x28\x63\x2E\x42\x29\x7B\x65\x27\x4D\x27\x3A\x31\x55\x28\x61\x2C\x63\x2E\x44\x29\x3B\x67\x3B\x65\x27\x31\x79\x27\x3A\x4A\x28\x61\x2C\x31\x36\x2C\x36\x2B\x27\x2D\x32\x6B\x27\x29\x3B\x34\x2E\x79\x28\x63\x29\x3B\x67\x3B\x65\x27\x31\x44\x27\x3A\x31\x65\x28\x61\x2C\x36\x2C\x32\x65\x2E\x31\x67\x28\x4B\x2C\x61\x2C\x36\x2C\x31\x46\x29\x29\x3B\x67\x3B\x57\x3A\x6B\x2E\x46\x28\x27\x53\x2C\x20\x45\x20\x42\x3A\x27\x2C\x63\x2E\x42\x29\x3B\x51\x20\x47\x20\x41\x28\x27\x53\x2C\x20\x45\x20\x42\x27\x29\x7D\x7D\x6D\x7B\x4A\x28\x61\x2C\x31\x36\x2C\x36\x2B\x27\x2D\x32\x6B\x27\x29\x3B\x34\x2E\x79\x28\x7B\x76\x3A\x58\x2C\x44\x3A\x27\x31\x7A\x20\x41\x27\x2C\x32\x6C\x3A\x31\x39\x28\x31\x36\x29\x7D\x29\x7D\x7D\x67\x3B\x65\x27\x31\x73\x27\x3A\x6B\x2E\x31\x34\x28\x27\x35\x4D\x20\x31\x64\x20\x32\x6B\x20\x35\x7A\x2C\x20\x31\x46\x27\x2C\x31\x46\x29\x3B\x37\x20\x31\x36\x3D\x31\x6F\x28\x27\x4F\x3A\x2F\x2F\x31\x52\x2E\x31\x5A\x2E\x49\x2F\x32\x6D\x2F\x32\x4E\x2F\x32\x72\x2F\x27\x2B\x31\x46\x2E\x31\x47\x2B\x27\x2F\x38\x47\x27\x2C\x7B\x31\x77\x3A\x27\x31\x58\x27\x2C\x68\x3A\x31\x59\x2E\x32\x6E\x28\x7B\x33\x4F\x3A\x27\x38\x78\x27\x2C\x38\x75\x3A\x27\x38\x7A\x27\x2C\x38\x45\x3A\x31\x6A\x7D\x29\x2C\x31\x76\x3A\x7B\x31\x71\x3A\x27\x31\x78\x20\x27\x2B\x62\x2E\x6A\x2E\x59\x2C\x27\x31\x43\x2D\x31\x4C\x27\x3A\x27\x32\x76\x2F\x31\x63\x3B\x20\x38\x44\x3D\x38\x41\x2D\x38\x27\x7D\x2C\x31\x42\x3A\x27\x31\x63\x27\x7D\x29\x3B\x39\x28\x31\x36\x2E\x76\x3D\x3D\x31\x50\x29\x7B\x6B\x2E\x31\x34\x28\x27\x31\x36\x3A\x27\x2C\x31\x36\x2E\x31\x37\x29\x3B\x32\x54\x28\x61\x2C\x36\x2C\x7B\x31\x47\x3A\x31\x46\x2E\x31\x47\x7D\x29\x7D\x6D\x7B\x34\x2E\x31\x4B\x28\x5B\x27\x31\x6E\x27\x5D\x29\x3B\x37\x20\x63\x3D\x31\x75\x28\x36\x2C\x31\x36\x29\x3B\x39\x28\x63\x29\x7B\x56\x28\x63\x2E\x42\x29\x7B\x65\x27\x4D\x27\x3A\x31\x55\x28\x61\x2C\x63\x2E\x44\x29\x3B\x67\x3B\x65\x27\x31\x79\x27\x3A\x4A\x28\x61\x2C\x31\x36\x2C\x36\x2B\x27\x2D\x32\x6B\x27\x29\x3B\x34\x2E\x79\x28\x63\x29\x3B\x67\x3B\x65\x27\x31\x44\x27\x3A\x31\x65\x28\x61\x2C\x36\x2C\x32\x65\x2E\x31\x67\x28\x4B\x2C\x61\x2C\x36\x2C\x31\x46\x29\x29\x3B\x67\x3B\x57\x3A\x6B\x2E\x46\x28\x27\x53\x2C\x20\x45\x20\x42\x3A\x27\x2C\x63\x2E\x42\x29\x3B\x51\x20\x47\x20\x41\x28\x27\x53\x2C\x20\x45\x20\x42\x27\x29\x7D\x7D\x6D\x7B\x4A\x28\x61\x2C\x31\x36\x2C\x36\x2B\x27\x2D\x32\x6B\x27\x29\x3B\x34\x2E\x79\x28\x7B\x76\x3A\x58\x2C\x44\x3A\x27\x31\x7A\x20\x41\x27\x2C\x32\x6C\x3A\x31\x39\x28\x31\x36\x29\x7D\x29\x7D\x7D\x67\x3B\x57\x3A\x6B\x2E\x46\x28\x27\x45\x20\x36\x20\x31\x72\x20\x32\x65\x27\x2C\x36\x29\x3B\x51\x20\x47\x20\x41\x28\x27\x45\x20\x36\x20\x31\x72\x20\x32\x65\x27\x29\x7D\x7D\x4E\x20\x32\x54\x28\x61\x2C\x36\x2C\x33\x4A\x29\x7B\x37\x20\x34\x3D\x31\x54\x28\x61\x29\x3B\x37\x20\x62\x3D\x4C\x5B\x36\x5D\x3B\x56\x28\x36\x29\x7B\x65\x27\x31\x73\x27\x3A\x37\x20\x31\x6B\x3D\x31\x6F\x28\x27\x4F\x3A\x2F\x2F\x31\x52\x2E\x31\x5A\x2E\x49\x2F\x32\x6D\x2F\x32\x4E\x2F\x32\x72\x2F\x27\x2B\x33\x4A\x2E\x31\x47\x2B\x27\x3F\x34\x53\x3D\x34\x51\x27\x2C\x7B\x31\x77\x3A\x27\x34\x52\x27\x2C\x31\x76\x3A\x7B\x31\x71\x3A\x27\x31\x78\x20\x27\x2B\x62\x2E\x6A\x2E\x59\x7D\x2C\x31\x42\x3A\x27\x31\x63\x27\x7D\x29\x3B\x39\x28\x31\x6B\x2E\x76\x3D\x3D\x31\x50\x29\x7B\x6B\x2E\x31\x34\x28\x27\x31\x6B\x3A\x27\x2C\x31\x6B\x2E\x31\x37\x29\x3B\x37\x20\x31\x45\x3D\x31\x6B\x2E\x31\x37\x2E\x34\x51\x3B\x31\x45\x3D\x31\x45\x2E\x38\x42\x28\x27\x26\x38\x43\x3D\x38\x79\x27\x2C\x27\x27\x29\x3B\x33\x44\x28\x36\x2C\x7B\x69\x3A\x33\x4A\x2E\x31\x47\x2C\x6C\x3A\x31\x45\x2C\x75\x3A\x62\x2E\x6A\x2E\x7A\x2C\x73\x3A\x62\x2E\x6A\x2E\x31\x48\x7D\x29\x3B\x34\x2E\x68\x2E\x32\x48\x3D\x31\x45\x3B\x34\x2E\x31\x4B\x28\x5B\x27\x32\x48\x27\x5D\x2C\x4E\x28\x29\x7B\x31\x32\x2E\x31\x6C\x28\x5B\x27\x31\x70\x27\x2C\x61\x2C\x7B\x31\x68\x3A\x27\x34\x33\x20\x2D\x20\x34\x31\x20\x34\x30\x27\x2C\x33\x7A\x3A\x27\x33\x59\x27\x2C\x32\x4A\x3A\x27\x33\x42\x27\x2C\x32\x73\x3A\x33\x48\x7D\x5D\x29\x7D\x29\x3B\x34\x2E\x79\x28\x7B\x76\x3A\x31\x6A\x7D\x29\x7D\x6D\x7B\x34\x2E\x31\x4B\x28\x5B\x27\x31\x6E\x27\x5D\x29\x3B\x37\x20\x63\x3D\x31\x75\x28\x36\x2C\x31\x6B\x29\x3B\x39\x28\x63\x29\x7B\x56\x28\x63\x2E\x42\x29\x7B\x65\x27\x4D\x27\x3A\x31\x55\x28\x61\x2C\x63\x2E\x44\x29\x3B\x67\x3B\x65\x27\x31\x79\x27\x3A\x4A\x28\x61\x2C\x31\x6B\x2C\x36\x2B\x27\x2D\x32\x6B\x27\x29\x3B\x34\x2E\x79\x28\x63\x29\x3B\x67\x3B\x65\x27\x31\x44\x27\x3A\x31\x65\x28\x61\x2C\x36\x2C\x32\x54\x2E\x31\x67\x28\x4B\x2C\x61\x2C\x36\x2C\x33\x4A\x29\x29\x3B\x67\x3B\x57\x3A\x6B\x2E\x46\x28\x27\x53\x2C\x20\x45\x20\x42\x3A\x27\x2C\x63\x2E\x42\x29\x3B\x51\x20\x47\x20\x41\x28\x27\x53\x2C\x20\x45\x20\x42\x27\x29\x7D\x7D\x6D\x7B\x4A\x28\x61\x2C\x31\x6B\x2C\x36\x2B\x27\x2D\x32\x6B\x27\x29\x3B\x34\x2E\x79\x28\x7B\x76\x3A\x58\x2C\x44\x3A\x27\x31\x7A\x20\x41\x27\x2C\x32\x6C\x3A\x31\x39\x28\x31\x6B\x29\x7D\x29\x7D\x7D\x67\x3B\x57\x3A\x6B\x2E\x46\x28\x27\x45\x20\x36\x20\x31\x72\x20\x32\x54\x27\x2C\x36\x29\x3B\x51\x20\x47\x20\x41\x28\x27\x45\x20\x36\x20\x31\x72\x20\x32\x54\x27\x29\x7D\x7D\x37\x20\x34\x37\x3D\x30\x3B\x4E\x20\x38\x74\x28\x61\x2C\x33\x41\x2C\x31\x57\x2C\x38\x76\x29\x7B\x37\x20\x34\x3D\x31\x54\x28\x61\x29\x3B\x37\x20\x32\x58\x3D\x7B\x7D\x3B\x56\x28\x33\x41\x29\x7B\x65\x27\x32\x4B\x2D\x34\x35\x27\x3A\x32\x58\x2E\x38\x77\x3D\x27\x7B\x7B\x35\x46\x7D\x7D\x27\x3B\x32\x58\x2E\x37\x37\x3D\x27\x38\x4B\x2E\x31\x4E\x27\x3B\x67\x3B\x65\x27\x33\x58\x27\x3A\x32\x58\x2E\x31\x4A\x3D\x27\x7B\x7B\x35\x46\x7D\x7D\x27\x3B\x67\x3B\x57\x3A\x51\x20\x47\x20\x41\x28\x27\x53\x21\x20\x45\x20\x35\x43\x20\x33\x72\x20\x31\x72\x20\x35\x79\x20\x31\x4A\x20\x38\x63\x27\x29\x7D\x37\x20\x35\x6A\x3D\x4E\x28\x29\x7B\x34\x37\x2B\x2B\x3B\x37\x20\x34\x46\x3D\x32\x44\x2E\x33\x64\x2E\x33\x45\x28\x32\x44\x2E\x37\x5A\x2E\x33\x64\x2E\x37\x71\x2C\x27\x37\x70\x2D\x27\x2B\x28\x47\x20\x37\x6F\x28\x29\x2E\x37\x6D\x28\x29\x29\x2B\x27\x2D\x27\x2B\x34\x37\x2B\x27\x2E\x31\x4E\x27\x29\x3B\x37\x6E\x7B\x32\x44\x2E\x37\x72\x2E\x37\x73\x28\x34\x46\x2C\x47\x20\x33\x56\x28\x34\x2E\x68\x2E\x31\x6E\x2E\x35\x50\x28\x29\x29\x29\x7D\x37\x78\x28\x33\x51\x29\x7B\x34\x2E\x79\x28\x7B\x76\x3A\x58\x2C\x44\x3A\x27\x32\x59\x20\x38\x30\x20\x37\x76\x20\x35\x4D\x20\x31\x64\x20\x37\x74\x20\x37\x75\x20\x33\x4D\x20\x31\x72\x20\x31\x4D\x20\x31\x64\x20\x35\x79\x20\x34\x44\x20\x32\x30\x27\x2C\x33\x51\x3A\x33\x51\x7D\x29\x3B\x51\x20\x33\x51\x7D\x34\x2E\x31\x4B\x28\x5B\x27\x31\x6E\x27\x5D\x29\x3B\x31\x32\x2E\x31\x6C\x28\x5B\x27\x31\x70\x27\x2C\x61\x2C\x7B\x31\x68\x3A\x27\x37\x6C\x20\x37\x6B\x2E\x2E\x2E\x27\x7D\x5D\x29\x3B\x31\x32\x2E\x31\x6C\x28\x5B\x27\x35\x49\x27\x2C\x5B\x27\x37\x63\x27\x2C\x61\x2C\x4C\x5B\x33\x41\x5D\x2E\x34\x45\x2C\x34\x46\x2C\x32\x58\x5D\x5D\x29\x3B\x33\x44\x28\x33\x41\x29\x3B\x34\x2E\x79\x28\x7B\x76\x3A\x31\x6A\x2C\x44\x3A\x27\x34\x44\x20\x37\x62\x20\x37\x61\x20\x2D\x20\x35\x7A\x20\x39\x20\x35\x6B\x20\x33\x70\x20\x37\x38\x20\x37\x39\x20\x31\x62\x20\x69\x20\x34\x48\x20\x34\x47\x20\x2D\x20\x32\x51\x20\x33\x35\x20\x33\x31\x20\x34\x49\x20\x37\x64\x20\x31\x72\x20\x31\x53\x20\x37\x65\x20\x37\x6A\x27\x7D\x29\x7D\x3B\x34\x2E\x35\x69\x28\x5B\x27\x31\x6E\x27\x5D\x2C\x35\x6A\x29\x3B\x54\x20\x34\x2E\x33\x74\x28\x29\x2E\x33\x31\x7D\x4E\x20\x32\x31\x28\x31\x6D\x2C\x61\x29\x7B\x37\x20\x55\x3B\x31\x72\x28\x37\x20\x69\x3D\x30\x3B\x69\x3C\x34\x6B\x2E\x35\x65\x3B\x69\x2B\x2B\x29\x7B\x39\x28\x34\x6B\x5B\x69\x5D\x2E\x64\x3D\x3D\x3D\x31\x6D\x29\x7B\x55\x3D\x34\x6B\x5B\x69\x5D\x3B\x67\x7D\x7D\x39\x28\x21\x55\x29\x7B\x54\x5B\x7B\x76\x3A\x58\x2C\x44\x3A\x27\x37\x69\x20\x31\x62\x20\x37\x68\x20\x35\x61\x20\x37\x66\x20\x2E\x64\x20\x3D\x3D\x3D\x20\x27\x2B\x31\x6D\x7D\x5D\x7D\x37\x20\x34\x3D\x61\x3F\x31\x54\x28\x61\x29\x3A\x31\x54\x28\x4B\x2C\x31\x6A\x29\x3B\x37\x20\x33\x65\x3B\x39\x28\x21\x34\x2E\x37\x67\x29\x7B\x33\x65\x3D\x34\x2E\x33\x74\x28\x29\x2E\x33\x31\x7D\x56\x28\x55\x2E\x74\x29\x7B\x65\x20\x31\x66\x2E\x31\x74\x3A\x37\x20\x5A\x3D\x27\x31\x74\x27\x3B\x37\x20\x62\x3D\x4C\x5B\x5A\x5D\x3B\x39\x28\x21\x62\x2E\x6A\x2E\x59\x29\x7B\x31\x65\x28\x34\x2E\x31\x33\x2C\x5A\x2C\x32\x31\x2E\x31\x67\x28\x4B\x2C\x31\x6D\x2C\x34\x2E\x31\x33\x29\x29\x7D\x6D\x7B\x37\x20\x31\x6B\x3D\x31\x6F\x28\x27\x4F\x3A\x2F\x2F\x32\x30\x2E\x32\x4D\x2E\x49\x2F\x32\x2F\x32\x72\x2F\x37\x79\x27\x2C\x7B\x31\x77\x3A\x27\x31\x58\x27\x2C\x68\x3A\x31\x59\x2E\x32\x6E\x28\x7B\x32\x49\x3A\x55\x2E\x69\x7D\x29\x2C\x31\x76\x3A\x7B\x31\x71\x3A\x27\x31\x78\x20\x27\x2B\x62\x2E\x6A\x2E\x59\x2C\x27\x31\x43\x2D\x31\x4C\x27\x3A\x27\x32\x76\x2F\x31\x63\x27\x7D\x2C\x31\x42\x3A\x27\x31\x63\x27\x7D\x29\x3B\x6B\x2E\x31\x34\x28\x27\x31\x6B\x3A\x27\x2C\x31\x39\x28\x31\x6B\x29\x29\x3B\x39\x28\x31\x6B\x2E\x76\x3D\x3D\x31\x50\x29\x7B\x34\x2E\x68\x2E\x34\x68\x3D\x31\x6B\x2E\x31\x37\x7D\x6D\x7B\x37\x20\x63\x3D\x31\x75\x28\x36\x2C\x52\x29\x7C\x7C\x4A\x28\x34\x2E\x31\x33\x2C\x52\x2C\x5A\x2B\x27\x2D\x37\x7A\x27\x29\x3B\x56\x28\x63\x2E\x42\x29\x7B\x65\x27\x4D\x27\x3A\x67\x3B\x65\x27\x31\x79\x27\x3A\x67\x3B\x65\x27\x31\x44\x27\x3A\x31\x65\x28\x34\x2E\x31\x33\x2C\x5A\x2C\x32\x31\x2E\x31\x67\x28\x4B\x2C\x31\x6D\x2C\x34\x2E\x31\x33\x29\x29\x3B\x67\x3B\x57\x3A\x63\x2E\x44\x3D\x27\x31\x7A\x20\x41\x27\x7D\x34\x2E\x79\x28\x63\x29\x7D\x39\x28\x34\x2E\x68\x2E\x34\x68\x29\x7B\x37\x20\x52\x3D\x31\x6F\x28\x27\x4F\x3A\x2F\x2F\x32\x30\x2E\x32\x4D\x2E\x49\x2F\x32\x2F\x32\x72\x2F\x32\x36\x27\x2C\x7B\x31\x77\x3A\x27\x31\x58\x27\x2C\x68\x3A\x31\x59\x2E\x32\x6E\x28\x7B\x32\x49\x3A\x34\x2E\x68\x2E\x34\x68\x2E\x35\x6C\x7D\x29\x2C\x31\x76\x3A\x7B\x31\x71\x3A\x27\x31\x78\x20\x27\x2B\x62\x2E\x6A\x2E\x59\x2C\x27\x31\x43\x2D\x31\x4C\x27\x3A\x27\x32\x76\x2F\x31\x63\x27\x7D\x2C\x31\x42\x3A\x27\x31\x63\x27\x7D\x29\x3B\x6B\x2E\x31\x34\x28\x27\x52\x3A\x27\x2C\x31\x39\x28\x52\x29\x29\x3B\x39\x28\x52\x2E\x76\x3D\x3D\x31\x50\x29\x7B\x34\x2E\x79\x28\x33\x4E\x28\x31\x6D\x29\x29\x7D\x6D\x7B\x37\x20\x63\x3D\x31\x75\x28\x5A\x2C\x52\x29\x7C\x7C\x4A\x28\x34\x2E\x31\x33\x2C\x52\x2C\x5A\x2B\x27\x2D\x32\x36\x27\x29\x3B\x56\x28\x63\x2E\x42\x29\x7B\x65\x27\x4D\x27\x3A\x67\x3B\x65\x27\x31\x79\x27\x3A\x67\x3B\x65\x27\x31\x44\x27\x3A\x31\x65\x28\x34\x2E\x31\x33\x2C\x5A\x2C\x32\x31\x2E\x31\x67\x28\x4B\x2C\x31\x6D\x2C\x34\x2E\x31\x33\x29\x29\x3B\x67\x3B\x57\x3A\x63\x2E\x44\x3D\x27\x31\x7A\x20\x41\x27\x7D\x34\x2E\x79\x28\x63\x29\x7D\x7D\x7D\x67\x3B\x65\x20\x31\x66\x2E\x31\x73\x3A\x37\x20\x5A\x3D\x27\x31\x73\x27\x3B\x37\x20\x62\x3D\x4C\x5B\x5A\x5D\x3B\x37\x20\x71\x3B\x39\x28\x62\x2E\x6A\x2E\x7A\x26\x26\x62\x2E\x6A\x2E\x7A\x3D\x3D\x55\x2E\x75\x29\x7B\x39\x28\x62\x2E\x31\x38\x5B\x55\x2E\x75\x5D\x26\x26\x62\x2E\x6A\x26\x26\x62\x2E\x6A\x2E\x7A\x3D\x3D\x55\x2E\x75\x29\x7B\x6B\x2E\x46\x28\x27\x53\x20\x2D\x20\x31\x53\x20\x32\x35\x20\x32\x61\x20\x35\x77\x2C\x20\x69\x20\x32\x35\x20\x32\x61\x20\x32\x39\x20\x32\x33\x20\x50\x20\x6A\x20\x35\x78\x20\x35\x73\x20\x35\x72\x20\x31\x38\x27\x2C\x27\x55\x2E\x75\x3A\x27\x2C\x55\x2E\x75\x2C\x27\x62\x3A\x27\x2C\x62\x29\x3B\x51\x20\x47\x20\x41\x28\x27\x53\x20\x2D\x20\x31\x53\x20\x32\x35\x20\x32\x61\x20\x35\x77\x2C\x20\x69\x20\x32\x35\x20\x32\x61\x20\x32\x39\x20\x32\x33\x20\x50\x20\x6A\x20\x35\x78\x20\x35\x73\x20\x35\x72\x20\x31\x38\x27\x29\x7D\x71\x3D\x62\x2E\x31\x38\x5B\x55\x2E\x75\x5D\x7C\x7C\x62\x2E\x6A\x7D\x6D\x7B\x34\x2E\x68\x2E\x31\x31\x3D\x55\x2E\x75\x3B\x39\x28\x62\x2E\x31\x38\x5B\x55\x2E\x75\x5D\x29\x7B\x71\x3D\x62\x2E\x31\x38\x5B\x55\x2E\x75\x5D\x7D\x6D\x7B\x31\x65\x28\x34\x2E\x31\x33\x2C\x5A\x2C\x32\x31\x2E\x31\x67\x28\x4B\x2C\x31\x6D\x2C\x34\x2E\x31\x33\x29\x29\x7D\x7D\x39\x28\x71\x29\x7B\x37\x20\x52\x3D\x31\x6F\x28\x27\x4F\x3A\x2F\x2F\x31\x52\x2E\x31\x5A\x2E\x49\x2F\x32\x6D\x2F\x32\x4E\x2F\x32\x72\x2F\x27\x2B\x55\x2E\x69\x2C\x7B\x31\x77\x3A\x27\x35\x71\x27\x2C\x31\x76\x3A\x7B\x31\x71\x3A\x27\x31\x78\x20\x27\x2B\x71\x2E\x59\x7D\x7D\x29\x3B\x6B\x2E\x31\x34\x28\x27\x52\x3A\x27\x2C\x31\x39\x28\x52\x29\x29\x3B\x39\x28\x52\x2E\x76\x3D\x3D\x37\x53\x29\x7B\x34\x2E\x79\x28\x33\x4E\x28\x31\x6D\x29\x29\x7D\x6D\x7B\x37\x20\x63\x3D\x31\x75\x28\x5A\x2C\x52\x29\x7C\x7C\x4A\x28\x34\x2E\x31\x33\x2C\x52\x2C\x5A\x2B\x27\x2D\x32\x36\x27\x29\x3B\x56\x28\x63\x2E\x42\x29\x7B\x65\x27\x4D\x27\x3A\x67\x3B\x65\x27\x31\x79\x27\x3A\x67\x3B\x65\x27\x31\x44\x27\x3A\x31\x65\x28\x34\x2E\x31\x33\x2C\x5A\x2C\x32\x31\x2E\x31\x67\x28\x4B\x2C\x31\x6D\x2C\x34\x2E\x31\x33\x29\x29\x3B\x67\x3B\x57\x3A\x63\x2E\x44\x3D\x27\x31\x7A\x20\x41\x27\x7D\x34\x2E\x79\x28\x63\x29\x7D\x7D\x67\x3B\x65\x20\x31\x66\x2E\x31\x51\x3A\x65\x20\x31\x66\x2E\x48\x3A\x37\x20\x5A\x3D\x28\x55\x2E\x74\x3D\x3D\x3D\x31\x66\x2E\x48\x3F\x27\x48\x27\x3A\x27\x31\x51\x27\x29\x3B\x37\x20\x62\x3D\x4C\x5B\x5A\x5D\x3B\x39\x28\x55\x2E\x74\x3D\x3D\x3D\x31\x66\x2E\x48\x26\x26\x21\x62\x2E\x6A\x2E\x59\x29\x7B\x31\x65\x28\x34\x2E\x31\x33\x2C\x27\x48\x27\x2C\x32\x31\x2E\x31\x67\x28\x4B\x2C\x31\x6D\x2C\x34\x2E\x31\x33\x29\x29\x7D\x6D\x7B\x37\x20\x52\x3D\x31\x6F\x28\x62\x2E\x35\x4F\x2B\x55\x2E\x78\x2C\x7B\x31\x77\x3A\x27\x35\x71\x27\x2C\x31\x76\x3A\x7B\x31\x71\x3A\x28\x55\x2E\x74\x3D\x3D\x3D\x31\x66\x5B\x27\x31\x51\x27\x5D\x3F\x27\x35\x70\x2D\x35\x6F\x20\x27\x2B\x28\x55\x2E\x77\x3F\x62\x2E\x32\x34\x3A\x4C\x2E\x35\x6D\x2E\x32\x34\x29\x3A\x27\x31\x78\x20\x27\x2B\x62\x2E\x6A\x2E\x59\x29\x7D\x2C\x31\x42\x3A\x27\x31\x63\x27\x7D\x29\x3B\x6B\x2E\x31\x34\x28\x27\x52\x3A\x27\x2C\x31\x39\x28\x52\x29\x29\x3B\x39\x28\x52\x2E\x76\x3D\x3D\x31\x50\x29\x7B\x34\x2E\x79\x28\x33\x4E\x28\x31\x6D\x29\x29\x7D\x6D\x7B\x37\x20\x63\x3D\x31\x75\x28\x5A\x2C\x52\x29\x7C\x7C\x4A\x28\x34\x2E\x31\x33\x2C\x52\x2C\x5A\x2B\x27\x2D\x32\x36\x27\x29\x3B\x56\x28\x63\x2E\x42\x29\x7B\x65\x27\x4D\x27\x3A\x67\x3B\x65\x27\x31\x79\x27\x3A\x67\x3B\x65\x27\x31\x44\x27\x3A\x31\x65\x28\x34\x2E\x31\x33\x2C\x5A\x2C\x32\x31\x2E\x31\x67\x28\x4B\x2C\x31\x6D\x2C\x34\x2E\x31\x33\x29\x29\x3B\x67\x3B\x57\x3A\x63\x2E\x44\x3D\x27\x31\x7A\x20\x41\x27\x7D\x34\x2E\x79\x28\x63\x29\x7D\x7D\x67\x3B\x65\x20\x31\x66\x5B\x27\x31\x4F\x2D\x33\x66\x27\x5D\x3A\x65\x20\x31\x66\x5B\x27\x31\x4F\x2D\x33\x52\x27\x5D\x3A\x31\x32\x2E\x33\x63\x28\x5B\x27\x37\x52\x27\x2C\x27\x37\x51\x27\x2C\x5B\x27\x37\x4F\x27\x2C\x55\x2E\x34\x73\x2E\x35\x51\x5D\x5D\x2C\x4E\x28\x33\x43\x29\x7B\x6B\x2E\x31\x34\x28\x27\x33\x43\x3A\x27\x2C\x33\x43\x29\x3B\x39\x28\x21\x33\x43\x29\x7B\x34\x2E\x79\x28\x7B\x76\x3A\x58\x2C\x44\x3A\x27\x33\x34\x20\x31\x64\x20\x37\x50\x20\x33\x4D\x20\x31\x64\x20\x33\x35\x20\x37\x54\x2F\x37\x55\x20\x37\x59\x27\x7D\x29\x7D\x6D\x7B\x34\x2E\x79\x28\x33\x4E\x28\x31\x6D\x29\x29\x7D\x7D\x29\x3B\x67\x3B\x57\x3A\x54\x5B\x7B\x76\x3A\x58\x2C\x44\x3A\x27\x31\x53\x20\x33\x4F\x20\x35\x74\x20\x35\x38\x20\x37\x58\x20\x33\x4D\x20\x35\x6B\x20\x37\x57\x20\x35\x63\x20\x37\x56\x2E\x20\x37\x4E\x20\x3D\x3D\x3D\x20\x27\x2B\x55\x2E\x74\x7D\x5D\x7D\x39\x28\x33\x65\x29\x7B\x54\x20\x33\x65\x7D\x7D\x4E\x20\x35\x67\x28\x33\x77\x29\x7B\x39\x28\x33\x77\x3C\x3D\x33\x29\x7B\x54\x20\x35\x7D\x6D\x20\x39\x28\x33\x77\x3C\x3D\x31\x30\x29\x7B\x54\x20\x31\x30\x7D\x6D\x20\x39\x28\x33\x77\x3C\x3D\x33\x30\x29\x7B\x54\x20\x36\x30\x7D\x6D\x7B\x54\x20\x37\x4D\x7D\x7D\x4E\x20\x31\x55\x28\x61\x2C\x31\x68\x29\x7B\x39\x28\x34\x78\x28\x61\x29\x29\x7B\x6B\x2E\x46\x28\x27\x31\x62\x20\x32\x74\x20\x33\x68\x20\x4D\x20\x32\x75\x20\x33\x67\x20\x33\x49\x27\x29\x3B\x51\x20\x47\x20\x41\x28\x27\x31\x62\x20\x32\x74\x20\x33\x68\x20\x4D\x20\x32\x75\x20\x33\x67\x20\x33\x49\x27\x29\x7D\x37\x20\x34\x3D\x31\x54\x28\x61\x29\x3B\x39\x28\x21\x34\x2E\x4D\x29\x7B\x39\x28\x27\x33\x37\x27\x50\x20\x34\x29\x7B\x34\x2E\x33\x37\x2B\x2B\x7D\x6D\x7B\x34\x2E\x33\x37\x3D\x30\x7D\x34\x2E\x4D\x3D\x7B\x33\x50\x3A\x35\x67\x28\x34\x2E\x33\x37\x29\x2C\x34\x6E\x3A\x33\x48\x7D\x7D\x6D\x7B\x34\x2E\x4D\x2E\x33\x50\x2D\x2D\x3B\x39\x28\x34\x2E\x4D\x2E\x33\x50\x3D\x3D\x30\x29\x7B\x32\x36\x20\x34\x2E\x4D\x3B\x6B\x2E\x46\x28\x27\x37\x45\x20\x37\x44\x20\x31\x64\x20\x33\x39\x27\x29\x3B\x31\x32\x2E\x31\x6C\x28\x5B\x27\x35\x49\x27\x2C\x5B\x27\x37\x43\x27\x2C\x61\x5D\x5D\x29\x3B\x54\x7D\x7D\x31\x32\x2E\x31\x6C\x28\x5B\x27\x31\x70\x27\x2C\x61\x2C\x7B\x31\x68\x3A\x31\x68\x2B\x27\x20\x28\x27\x2B\x28\x34\x2E\x33\x37\x2B\x31\x29\x2B\x27\x20\x37\x41\x29\x20\x2D\x20\x37\x42\x20\x50\x20\x27\x2B\x34\x2E\x4D\x2E\x33\x50\x2B\x27\x73\x27\x2C\x32\x4A\x3A\x27\x34\x32\x27\x2C\x32\x73\x3A\x5B\x7B\x32\x66\x3A\x27\x35\x52\x20\x37\x46\x27\x2C\x32\x68\x3A\x27\x33\x53\x27\x7D\x2C\x7B\x32\x66\x3A\x27\x34\x54\x20\x33\x61\x20\x31\x4F\x20\x31\x64\x20\x33\x6B\x20\x2D\x20\x35\x4B\x27\x2C\x32\x68\x3A\x27\x33\x53\x27\x2C\x32\x45\x3A\x27\x31\x4F\x2D\x33\x66\x27\x7D\x2C\x7B\x32\x66\x3A\x27\x34\x54\x20\x33\x61\x20\x31\x4F\x20\x31\x64\x20\x33\x6B\x20\x2D\x20\x35\x30\x27\x2C\x32\x68\x3A\x27\x33\x53\x27\x2C\x32\x45\x3A\x27\x31\x4F\x2D\x33\x52\x27\x7D\x5D\x7D\x5D\x29\x3B\x34\x2E\x4D\x2E\x34\x6E\x3D\x37\x47\x28\x31\x55\x2E\x31\x67\x28\x4B\x2C\x61\x2C\x31\x68\x29\x2C\x37\x4C\x29\x7D\x4E\x20\x37\x4B\x28\x61\x29\x7B\x39\x28\x34\x78\x28\x61\x29\x29\x7B\x6B\x2E\x46\x28\x27\x31\x62\x20\x32\x74\x20\x33\x68\x20\x4D\x20\x32\x75\x20\x33\x67\x20\x33\x49\x27\x29\x3B\x51\x20\x47\x20\x41\x28\x27\x31\x62\x20\x32\x74\x20\x33\x68\x20\x4D\x20\x32\x75\x20\x33\x67\x20\x33\x49\x27\x29\x7D\x37\x20\x34\x3D\x31\x54\x28\x61\x29\x3B\x39\x28\x21\x34\x2E\x4D\x29\x7B\x54\x20\x31\x6A\x7D\x6D\x7B\x37\x4A\x28\x34\x2E\x4D\x2E\x34\x6E\x29\x3B\x32\x36\x20\x34\x2E\x4D\x3B\x54\x20\x31\x6A\x7D\x7D\x4E\x20\x37\x48\x28\x31\x69\x29\x7B\x37\x20\x31\x49\x3D\x7B\x7D\x3B\x56\x28\x31\x69\x2E\x74\x29\x7B\x65\x20\x31\x66\x2E\x31\x74\x3A\x31\x49\x2E\x32\x38\x3D\x31\x69\x2E\x6C\x3B\x67\x3B\x65\x20\x31\x66\x2E\x31\x73\x3A\x31\x49\x2E\x32\x38\x3D\x31\x69\x2E\x6C\x3B\x67\x3B\x65\x20\x31\x66\x2E\x48\x3A\x31\x49\x2E\x32\x38\x3D\x4C\x2E\x48\x2E\x33\x36\x2B\x31\x69\x2E\x69\x2B\x4C\x2E\x48\x2E\x32\x62\x3B\x67\x3B\x65\x20\x31\x66\x2E\x31\x51\x3A\x39\x28\x27\x77\x27\x50\x20\x31\x69\x29\x7B\x31\x49\x2E\x32\x38\x3D\x4C\x2E\x48\x2E\x33\x36\x2B\x31\x69\x2E\x69\x2B\x4C\x2E\x48\x2E\x32\x62\x7D\x6D\x7B\x31\x49\x2E\x32\x38\x3D\x4C\x2E\x48\x2E\x33\x36\x2B\x31\x69\x2E\x6E\x2B\x4C\x2E\x48\x2E\x32\x62\x7D\x67\x3B\x65\x20\x31\x66\x5B\x27\x31\x4F\x2D\x33\x66\x27\x5D\x3A\x65\x20\x31\x66\x5B\x27\x31\x4F\x2D\x33\x52\x27\x5D\x3A\x31\x49\x2E\x32\x38\x3D\x32\x44\x2E\x33\x64\x2E\x37\x49\x28\x32\x44\x2E\x33\x64\x2E\x33\x45\x28\x31\x69\x2E\x66\x2C\x31\x69\x2E\x6E\x29\x29\x3B\x31\x49\x2E\x35\x51\x3D\x32\x44\x2E\x33\x64\x2E\x33\x45\x28\x31\x69\x2E\x66\x2C\x31\x69\x2E\x6E\x29\x3B\x67\x3B\x65\x20\x31\x66\x2E\x33\x6E\x3A\x31\x49\x2E\x32\x38\x3D\x31\x69\x2E\x6C\x2B\x4C\x2E\x33\x6E\x2E\x32\x62\x3B\x67\x3B\x57\x3A\x6B\x2E\x31\x34\x28\x27\x35\x38\x20\x34\x73\x20\x31\x72\x20\x31\x53\x20\x35\x61\x21\x21\x21\x3A\x27\x2C\x31\x69\x29\x3B\x54\x7D\x31\x69\x2E\x34\x73\x3D\x31\x49\x7D","\x7C","\x73\x70\x6C\x69\x74","\x7C\x7C\x7C\x7C\x63\x42\x74\x6E\x53\x74\x6F\x72\x65\x7C\x7C\x61\x4F\x41\x75\x74\x68\x53\x65\x72\x76\x69\x63\x65\x7C\x76\x61\x72\x7C\x7C\x69\x66\x7C\x61\x42\x74\x6E\x49\x64\x7C\x63\x43\x6F\x6E\x66\x67\x7C\x66\x61\x69\x6C\x53\x74\x61\x74\x75\x73\x4F\x62\x6A\x7C\x7C\x63\x61\x73\x65\x7C\x7C\x62\x72\x65\x61\x6B\x7C\x64\x61\x74\x61\x7C\x7C\x73\x65\x73\x73\x69\x6F\x6E\x4F\x62\x6A\x7C\x63\x6F\x6E\x73\x6F\x6C\x65\x7C\x7C\x65\x6C\x73\x65\x7C\x7C\x7C\x7C\x74\x61\x72\x67\x65\x74\x53\x65\x73\x73\x69\x6F\x6E\x4F\x62\x6A\x7C\x7C\x7C\x7C\x7C\x73\x74\x61\x74\x75\x73\x7C\x7C\x7C\x72\x65\x73\x6F\x6C\x76\x65\x44\x65\x66\x65\x72\x72\x65\x64\x7C\x75\x69\x64\x7C\x45\x72\x72\x6F\x72\x7C\x64\x65\x76\x68\x69\x6E\x74\x7C\x72\x65\x7A\x5F\x78\x68\x72\x55\x70\x6C\x6F\x61\x64\x7C\x6D\x73\x67\x7C\x69\x6E\x76\x61\x6C\x69\x64\x7C\x65\x72\x72\x6F\x72\x7C\x6E\x65\x77\x7C\x69\x6D\x67\x75\x72\x7C\x63\x6F\x6D\x7C\x73\x74\x6F\x72\x65\x45\x72\x72\x6F\x72\x44\x65\x74\x73\x46\x6F\x72\x42\x74\x6E\x49\x64\x7C\x6E\x75\x6C\x6C\x7C\x67\x43\x6F\x6E\x66\x67\x75\x72\x65\x7C\x61\x75\x74\x6F\x72\x65\x74\x72\x79\x7C\x66\x75\x6E\x63\x74\x69\x6F\x6E\x7C\x68\x74\x74\x70\x73\x7C\x69\x6E\x7C\x74\x68\x72\x6F\x77\x7C\x72\x65\x7A\x5F\x78\x68\x72\x44\x65\x6C\x7C\x64\x65\x76\x65\x72\x72\x6F\x72\x7C\x72\x65\x74\x75\x72\x6E\x7C\x63\x4C\x6F\x67\x45\x6E\x74\x72\x79\x7C\x73\x77\x69\x74\x63\x68\x7C\x64\x65\x66\x61\x75\x6C\x74\x7C\x66\x61\x6C\x73\x65\x7C\x61\x63\x63\x65\x73\x73\x5F\x74\x6F\x6B\x65\x6E\x7C\x63\x4F\x41\x75\x74\x68\x53\x65\x72\x76\x69\x63\x65\x7C\x7C\x6D\x75\x6C\x74\x69\x41\x63\x63\x74\x5F\x66\x69\x6C\x6C\x41\x63\x63\x74\x73\x53\x65\x73\x73\x69\x6F\x6E\x4F\x62\x6A\x55\x69\x64\x7C\x73\x65\x6C\x66\x7C\x62\x74\x6E\x49\x64\x7C\x6C\x6F\x67\x7C\x61\x4C\x6F\x61\x64\x4F\x61\x75\x74\x68\x46\x68\x72\x52\x65\x73\x7C\x72\x65\x7A\x5F\x78\x68\x72\x53\x68\x61\x72\x65\x7C\x72\x65\x73\x70\x6F\x6E\x73\x65\x7C\x61\x63\x63\x74\x73\x53\x65\x73\x73\x69\x6F\x6E\x4F\x62\x6A\x7C\x67\x65\x74\x44\x65\x74\x61\x69\x6C\x73\x46\x72\x6F\x6D\x58\x68\x72\x52\x65\x73\x70\x6F\x6E\x73\x65\x7C\x72\x65\x7A\x5F\x78\x68\x72\x55\x69\x6E\x66\x6F\x7C\x6E\x6F\x74\x7C\x6A\x73\x6F\x6E\x7C\x74\x6F\x7C\x61\x75\x74\x68\x6F\x72\x69\x7A\x65\x41\x70\x70\x46\x6F\x72\x42\x74\x6E\x49\x64\x7C\x67\x4C\x6F\x67\x54\x79\x70\x65\x73\x4E\x32\x49\x7C\x62\x69\x6E\x64\x7C\x62\x54\x78\x74\x7C\x61\x4C\x6F\x67\x45\x6E\x74\x72\x79\x7C\x74\x72\x75\x65\x7C\x72\x65\x7A\x5F\x78\x68\x72\x4D\x65\x74\x61\x7C\x70\x6F\x73\x74\x4D\x65\x73\x73\x61\x67\x65\x7C\x61\x56\x61\x6C\x4F\x66\x44\x7C\x61\x72\x72\x62\x75\x66\x7C\x78\x68\x72\x7C\x75\x70\x64\x61\x74\x65\x41\x74\x74\x6E\x42\x61\x72\x7C\x41\x75\x74\x68\x6F\x72\x69\x7A\x61\x74\x69\x6F\x6E\x7C\x66\x6F\x72\x7C\x67\x64\x72\x69\x76\x65\x7C\x64\x72\x6F\x70\x62\x6F\x78\x7C\x74\x65\x73\x74\x46\x61\x69\x6C\x53\x74\x61\x74\x75\x73\x7C\x68\x65\x61\x64\x65\x72\x73\x7C\x6D\x65\x74\x68\x6F\x64\x7C\x42\x65\x61\x72\x65\x72\x7C\x67\x69\x76\x65\x75\x70\x7C\x55\x6E\x6B\x6E\x6F\x77\x6E\x7C\x6C\x6F\x67\x67\x65\x64\x7C\x72\x65\x73\x70\x6F\x6E\x73\x65\x54\x79\x70\x65\x7C\x43\x6F\x6E\x74\x65\x6E\x74\x7C\x72\x65\x61\x75\x74\x68\x7C\x73\x68\x61\x72\x65\x64\x4C\x69\x6E\x6B\x7C\x61\x44\x61\x74\x61\x4E\x65\x65\x64\x65\x64\x54\x6F\x43\x72\x65\x61\x74\x65\x7C\x69\x64\x7C\x73\x63\x72\x65\x65\x6E\x6E\x61\x6D\x65\x7C\x63\x4E\x6F\x57\x72\x69\x74\x65\x4F\x62\x6A\x7C\x69\x6D\x61\x67\x65\x7C\x70\x75\x74\x44\x61\x74\x61\x54\x6F\x42\x6F\x6F\x74\x73\x74\x72\x61\x70\x7C\x54\x79\x70\x65\x7C\x75\x70\x6C\x6F\x61\x64\x7C\x70\x6E\x67\x7C\x73\x61\x76\x65\x7C\x32\x30\x30\x7C\x69\x6D\x67\x75\x72\x61\x6E\x6F\x6E\x7C\x77\x77\x77\x7C\x74\x68\x69\x73\x7C\x67\x65\x74\x42\x74\x6E\x53\x74\x6F\x72\x65\x7C\x61\x75\x74\x6F\x72\x65\x74\x72\x79\x46\x6F\x72\x42\x74\x6E\x49\x64\x7C\x61\x63\x63\x74\x7C\x61\x53\x63\x72\x65\x65\x6E\x73\x68\x6F\x74\x54\x69\x6D\x65\x7C\x50\x4F\x53\x54\x7C\x4A\x53\x4F\x4E\x7C\x67\x6F\x6F\x67\x6C\x65\x61\x70\x69\x73\x7C\x61\x70\x69\x7C\x64\x65\x6C\x65\x74\x65\x45\x6E\x74\x72\x79\x49\x6E\x4C\x6F\x67\x7C\x6E\x6F\x44\x61\x74\x61\x7C\x61\x63\x63\x6F\x75\x6E\x74\x7C\x6B\x65\x79\x7C\x73\x68\x6F\x75\x6C\x64\x7C\x64\x65\x6C\x65\x74\x65\x7C\x61\x52\x65\x73\x75\x6D\x65\x43\x61\x6C\x6C\x62\x61\x63\x6B\x7C\x69\x6D\x67\x73\x72\x63\x7C\x68\x61\x76\x65\x7C\x6E\x65\x76\x65\x72\x7C\x69\x6D\x67\x5F\x75\x72\x6C\x5F\x73\x75\x66\x66\x69\x78\x7C\x73\x74\x61\x74\x75\x73\x54\x65\x78\x74\x7C\x68\x74\x74\x70\x7C\x63\x72\x65\x61\x74\x65\x53\x68\x61\x72\x65\x64\x4C\x69\x6E\x6B\x46\x6F\x72\x42\x74\x6E\x49\x64\x7C\x63\x54\x78\x74\x7C\x73\x69\x67\x6E\x49\x6E\x55\x72\x6C\x7C\x63\x43\x6C\x69\x63\x6B\x7C\x61\x4C\x6F\x61\x64\x41\x6C\x6C\x6F\x77\x46\x68\x72\x52\x65\x73\x7C\x61\x46\x48\x52\x52\x65\x73\x70\x6F\x6E\x73\x65\x7C\x73\x68\x61\x72\x65\x7C\x72\x65\x73\x70\x6F\x6E\x73\x65\x44\x65\x74\x61\x69\x6C\x73\x7C\x64\x72\x69\x76\x65\x7C\x73\x74\x72\x69\x6E\x67\x69\x66\x79\x7C\x75\x73\x65\x72\x50\x69\x63\x6B\x65\x64\x41\x63\x63\x74\x55\x69\x64\x7C\x61\x63\x63\x74\x73\x7C\x6C\x6F\x61\x64\x7C\x66\x69\x6C\x65\x73\x7C\x62\x4D\x65\x6E\x75\x7C\x79\x65\x74\x7C\x6F\x6E\x7C\x61\x70\x70\x6C\x69\x63\x61\x74\x69\x6F\x6E\x7C\x64\x61\x74\x61\x46\x6F\x72\x4C\x6F\x67\x45\x6E\x74\x72\x79\x7C\x75\x70\x6C\x6F\x61\x64\x49\x6D\x67\x41\x72\x72\x42\x75\x66\x46\x6F\x72\x42\x74\x6E\x49\x64\x7C\x74\x6F\x6B\x65\x6E\x7C\x65\x72\x72\x6F\x72\x64\x65\x74\x73\x7C\x6F\x61\x75\x74\x68\x7C\x61\x63\x63\x6F\x75\x6E\x74\x73\x7C\x69\x73\x7C\x4F\x53\x7C\x6D\x65\x6E\x75\x64\x61\x74\x61\x7C\x6E\x61\x74\x69\x76\x65\x73\x68\x6F\x74\x7C\x63\x43\x61\x6C\x6C\x62\x61\x63\x6B\x53\x65\x74\x4E\x61\x6D\x65\x7C\x63\x6F\x70\x79\x54\x78\x74\x7C\x70\x61\x74\x68\x7C\x62\x54\x79\x70\x65\x7C\x67\x6F\x6F\x67\x6C\x65\x7C\x63\x41\x75\x74\x68\x55\x72\x6C\x7C\x64\x72\x6F\x70\x62\x6F\x78\x61\x70\x69\x7C\x76\x33\x7C\x4E\x6F\x74\x7C\x6D\x75\x6C\x74\x69\x7C\x62\x75\x74\x7C\x49\x6E\x7C\x6F\x6B\x7C\x67\x65\x74\x55\x70\x6C\x6F\x61\x64\x65\x64\x4D\x65\x74\x61\x44\x61\x74\x61\x46\x6F\x72\x42\x74\x6E\x49\x64\x7C\x66\x6F\x72\x6D\x44\x61\x74\x61\x7C\x62\x6F\x75\x6E\x64\x61\x72\x79\x7C\x6D\x75\x6C\x74\x69\x70\x61\x72\x74\x52\x65\x71\x75\x65\x73\x74\x42\x6F\x64\x79\x7C\x63\x50\x6F\x73\x74\x44\x61\x74\x61\x4F\x62\x6A\x7C\x66\x61\x69\x6C\x65\x64\x7C\x64\x65\x73\x74\x72\x6F\x79\x46\x68\x72\x5F\x69\x64\x42\x74\x6E\x49\x64\x49\x73\x4E\x6F\x44\x61\x74\x61\x7C\x7C\x70\x72\x6F\x6D\x69\x73\x65\x7C\x7C\x6F\x61\x75\x74\x68\x32\x7C\x46\x61\x69\x6C\x65\x64\x7C\x74\x68\x65\x7C\x69\x6D\x67\x5F\x75\x72\x6C\x5F\x70\x72\x65\x66\x69\x78\x7C\x61\x75\x74\x6F\x72\x65\x74\x72\x79\x41\x74\x74\x6D\x70\x74\x43\x6E\x74\x7C\x72\x65\x64\x69\x72\x5F\x75\x72\x69\x7C\x72\x65\x74\x72\x79\x7C\x61\x6E\x64\x7C\x63\x6C\x69\x65\x6E\x74\x5F\x69\x64\x7C\x70\x6F\x73\x74\x4D\x65\x73\x73\x61\x67\x65\x57\x69\x74\x68\x43\x61\x6C\x6C\x62\x61\x63\x6B\x7C\x50\x61\x74\x68\x7C\x72\x65\x74\x4D\x61\x69\x6E\x5F\x70\x72\x6F\x6D\x69\x73\x65\x7C\x71\x75\x69\x63\x6B\x7C\x6E\x6F\x64\x61\x74\x61\x7C\x73\x75\x70\x70\x6F\x72\x74\x69\x6E\x67\x7C\x31\x32\x37\x7C\x41\x75\x74\x68\x6F\x72\x69\x7A\x69\x6E\x67\x7C\x64\x69\x73\x6B\x7C\x62\x61\x73\x65\x36\x34\x7C\x4C\x6F\x67\x67\x65\x64\x7C\x74\x77\x69\x74\x74\x65\x72\x7C\x6C\x6F\x61\x64\x69\x6E\x67\x7C\x70\x61\x67\x65\x7C\x62\x6C\x6F\x62\x7C\x6E\x61\x6D\x65\x7C\x75\x73\x65\x72\x7C\x67\x65\x74\x44\x65\x66\x65\x72\x72\x65\x64\x7C\x6E\x65\x65\x64\x65\x64\x7C\x73\x65\x72\x76\x65\x72\x7C\x61\x41\x74\x74\x65\x6D\x70\x74\x43\x6E\x74\x7C\x41\x63\x63\x6F\x75\x6E\x74\x7C\x63\x43\x6C\x69\x63\x6B\x53\x65\x74\x4E\x61\x6D\x65\x7C\x62\x43\x6C\x69\x63\x6B\x7C\x61\x53\x65\x72\x76\x69\x63\x65\x4E\x61\x6D\x65\x7C\x62\x75\x74\x74\x6F\x6E\x7C\x61\x42\x6F\x6F\x6C\x54\x72\x61\x73\x68\x65\x64\x7C\x61\x64\x64\x45\x6E\x74\x72\x79\x54\x6F\x4C\x6F\x67\x7C\x6A\x6F\x69\x6E\x7C\x72\x65\x73\x70\x6F\x6E\x73\x65\x5F\x74\x79\x70\x65\x7C\x6E\x65\x65\x64\x7C\x75\x6E\x64\x65\x66\x69\x6E\x65\x64\x7C\x6F\x70\x65\x72\x61\x74\x69\x6F\x6E\x73\x7C\x61\x44\x61\x74\x61\x4E\x65\x65\x64\x65\x64\x54\x6F\x4D\x65\x74\x61\x7C\x74\x61\x72\x67\x65\x74\x55\x69\x64\x7C\x63\x6F\x6E\x74\x65\x6E\x74\x54\x79\x70\x65\x7C\x66\x69\x6C\x65\x7C\x72\x65\x6D\x6F\x76\x65\x45\x6E\x74\x72\x79\x49\x6E\x4C\x6F\x67\x7C\x74\x79\x70\x65\x7C\x73\x65\x63\x4C\x65\x66\x74\x7C\x4F\x53\x46\x69\x6C\x65\x45\x72\x72\x6F\x72\x7C\x62\x72\x6F\x77\x73\x65\x7C\x61\x62\x6F\x72\x74\x5F\x61\x75\x74\x6F\x72\x65\x74\x72\x79\x5F\x74\x68\x65\x6E\x5F\x72\x65\x74\x72\x79\x7C\x63\x75\x72\x72\x65\x6E\x74\x6C\x79\x7C\x61\x4D\x75\x6C\x74\x69\x41\x63\x63\x74\x50\x69\x63\x6B\x65\x64\x55\x69\x64\x7C\x55\x69\x6E\x74\x38\x41\x72\x72\x61\x79\x7C\x61\x75\x74\x68\x6F\x72\x69\x7A\x65\x41\x70\x70\x46\x6F\x72\x42\x74\x6E\x49\x64\x5F\x61\x52\x65\x73\x75\x6D\x65\x43\x61\x6C\x6C\x62\x61\x63\x6B\x5F\x66\x6F\x72\x4D\x75\x6C\x74\x69\x41\x63\x63\x74\x50\x69\x63\x6B\x65\x72\x7C\x74\x69\x6E\x65\x79\x65\x7C\x63\x6F\x70\x79\x7C\x61\x75\x74\x68\x7C\x4C\x69\x6E\x6B\x7C\x43\x6F\x70\x79\x7C\x6D\x65\x6E\x75\x7C\x55\x70\x6C\x6F\x61\x64\x65\x64\x7C\x68\x61\x6E\x64\x6C\x65\x4C\x6F\x61\x64\x55\x73\x65\x72\x49\x6E\x66\x6F\x52\x65\x73\x7C\x69\x6D\x61\x67\x65\x73\x7C\x69\x6E\x64\x65\x78\x4F\x66\x7C\x67\x52\x65\x76\x65\x72\x73\x65\x53\x65\x61\x72\x63\x68\x4C\x61\x73\x74\x49\x64\x7C\x73\x70\x6C\x69\x63\x65\x4F\x62\x6A\x7C\x68\x65\x72\x65\x7C\x6F\x6E\x65\x7C\x67\x65\x74\x7C\x62\x4D\x65\x6E\x75\x4F\x66\x41\x63\x63\x74\x73\x7C\x66\x68\x72\x4C\x6F\x61\x64\x4F\x61\x75\x74\x68\x50\x61\x67\x65\x46\x6F\x72\x50\x69\x63\x6B\x65\x64\x41\x63\x63\x74\x7C\x61\x75\x74\x68\x5F\x75\x73\x65\x72\x5F\x69\x6E\x66\x6F\x7C\x70\x6F\x73\x7C\x68\x61\x6E\x64\x6C\x65\x4C\x6F\x61\x64\x41\x6C\x6C\x6F\x77\x52\x65\x73\x7C\x73\x65\x72\x76\x65\x72\x4D\x65\x74\x61\x44\x61\x74\x61\x7C\x61\x53\x65\x73\x73\x69\x6F\x6E\x4F\x62\x6A\x7C\x66\x68\x72\x4C\x6F\x61\x64\x4F\x61\x75\x74\x68\x50\x61\x67\x65\x7C\x67\x4A\x4C\x6F\x67\x7C\x68\x61\x6E\x64\x6C\x65\x4C\x6F\x61\x64\x4F\x61\x75\x74\x68\x52\x65\x73\x7C\x6D\x75\x6C\x74\x69\x70\x61\x72\x74\x7C\x74\x69\x6D\x65\x6F\x75\x74\x7C\x61\x6C\x6C\x6F\x77\x7C\x6A\x51\x4C\x69\x6B\x65\x7C\x73\x65\x72\x69\x61\x6C\x69\x7A\x65\x7C\x68\x61\x6E\x64\x6C\x65\x7C\x6E\x6F\x57\x72\x69\x74\x65\x4F\x62\x6A\x7C\x61\x41\x6C\x6C\x6F\x77\x65\x64\x50\x61\x72\x61\x6D\x73\x7C\x64\x65\x6C\x69\x6D\x69\x74\x65\x72\x7C\x6D\x65\x74\x61\x64\x61\x74\x61\x7C\x73\x63\x6F\x70\x65\x7C\x69\x73\x42\x74\x6E\x49\x64\x4E\x6F\x44\x61\x74\x61\x7C\x53\x65\x63\x6F\x6E\x64\x61\x72\x79\x7C\x69\x6D\x67\x75\x72\x4E\x6F\x74\x4C\x6F\x67\x67\x65\x64\x49\x6E\x49\x6E\x69\x74\x69\x61\x6C\x7C\x6D\x75\x6C\x74\x69\x70\x6C\x65\x7C\x59\x6F\x75\x7C\x66\x6F\x75\x6E\x64\x54\x61\x72\x67\x65\x74\x55\x69\x64\x7C\x73\x65\x61\x72\x63\x68\x7C\x73\x65\x61\x72\x63\x68\x5F\x75\x72\x6C\x7C\x72\x65\x76\x49\x6D\x67\x54\x65\x6D\x70\x46\x69\x6C\x65\x50\x61\x74\x68\x7C\x6B\x6E\x6F\x77\x7C\x64\x6F\x6E\x74\x7C\x77\x6F\x72\x6B\x65\x72\x7C\x61\x70\x70\x65\x6E\x64\x7C\x61\x75\x74\x6F\x67\x65\x6E\x53\x63\x72\x65\x65\x6E\x73\x68\x6F\x74\x46\x69\x6C\x65\x4E\x61\x6D\x65\x7C\x6F\x66\x7C\x75\x72\x6C\x7C\x66\x6F\x72\x6D\x7C\x62\x61\x73\x65\x64\x7C\x73\x65\x74\x7C\x77\x65\x62\x43\x6F\x6E\x74\x65\x6E\x74\x4C\x69\x6E\x6B\x7C\x47\x45\x54\x7C\x66\x69\x65\x6C\x64\x73\x7C\x41\x62\x6F\x72\x74\x7C\x53\x61\x76\x65\x7C\x61\x75\x74\x68\x6F\x72\x69\x7A\x65\x41\x70\x70\x7C\x73\x69\x67\x6E\x65\x64\x7C\x75\x73\x75\x72\x70\x55\x69\x64\x53\x63\x72\x65\x65\x6E\x6E\x61\x6D\x65\x46\x72\x6F\x6D\x46\x68\x72\x7C\x73\x69\x67\x6E\x69\x6E\x5F\x75\x72\x6C\x7C\x67\x65\x74\x55\x69\x64\x41\x6E\x64\x53\x63\x72\x65\x65\x6E\x6E\x61\x6D\x65\x7C\x42\x72\x6F\x77\x73\x65\x7C\x42\x6C\x6F\x62\x7C\x4F\x70\x65\x6E\x7C\x64\x6F\x41\x70\x69\x55\x70\x6C\x6F\x61\x64\x7C\x69\x6E\x66\x6F\x7C\x72\x61\x77\x7C\x63\x6C\x6F\x73\x65\x5F\x64\x65\x6C\x69\x6D\x7C\x74\x68\x6F\x75\x67\x68\x74\x7C\x6E\x6F\x7C\x61\x75\x74\x68\x6F\x72\x69\x7A\x65\x41\x70\x70\x5F\x7C\x65\x6E\x74\x72\x79\x7C\x61\x66\x74\x65\x72\x7C\x62\x65\x7C\x63\x4C\x6F\x61\x64\x50\x61\x67\x65\x44\x61\x74\x61\x7C\x6C\x65\x6E\x67\x74\x68\x7C\x6F\x6E\x6C\x79\x7C\x67\x65\x74\x52\x65\x74\x72\x79\x53\x65\x63\x46\x6F\x72\x41\x74\x74\x65\x6D\x70\x74\x43\x6E\x74\x7C\x63\x4C\x6F\x61\x64\x4F\x61\x75\x74\x68\x46\x68\x72\x52\x65\x73\x7C\x65\x78\x74\x72\x61\x63\x74\x44\x61\x74\x61\x46\x72\x6F\x6D\x42\x6F\x6F\x74\x73\x74\x72\x61\x70\x7C\x64\x6F\x5F\x70\x6F\x73\x74\x45\x78\x74\x72\x61\x63\x74\x41\x72\x72\x42\x75\x66\x7C\x74\x68\x61\x74\x7C\x70\x61\x74\x68\x5F\x64\x69\x73\x70\x6C\x61\x79\x7C\x69\x6D\x67\x75\x72\x5F\x6F\x6C\x64\x7C\x61\x75\x74\x68\x6F\x72\x69\x7A\x65\x7C\x49\x44\x7C\x43\x6C\x69\x65\x6E\x74\x7C\x44\x45\x4C\x45\x54\x45\x7C\x49\x4E\x7C\x41\x4C\x53\x4F\x7C\x68\x61\x73\x7C\x61\x75\x74\x68\x5F\x75\x72\x69\x7C\x72\x65\x64\x69\x72\x65\x63\x74\x5F\x75\x72\x69\x7C\x68\x61\x70\x70\x65\x6E\x7C\x41\x4E\x44\x7C\x72\x65\x76\x65\x72\x73\x65\x7C\x6E\x6F\x77\x7C\x73\x65\x63\x72\x65\x74\x7C\x61\x6C\x6C\x6F\x77\x5F\x7C\x73\x65\x72\x76\x69\x63\x65\x7C\x69\x64\x65\x61\x73\x7C\x6C\x6F\x61\x64\x49\x6D\x67\x75\x72\x4E\x6F\x74\x4C\x6F\x67\x67\x65\x64\x49\x6E\x7C\x61\x6E\x73\x69\x66\x69\x6C\x65\x7C\x54\x68\x65\x7C\x6D\x6F\x72\x65\x7C\x63\x61\x6C\x6C\x49\x6E\x42\x6F\x6F\x74\x73\x74\x72\x61\x70\x7C\x73\x6F\x6D\x65\x7C\x51\x75\x69\x63\x6B\x7C\x68\x61\x6E\x64\x6C\x65\x4C\x6F\x61\x64\x49\x6D\x67\x75\x72\x7C\x74\x72\x79\x69\x6E\x67\x7C\x68\x6F\x77\x7C\x64\x65\x6C\x5F\x75\x72\x6C\x5F\x70\x72\x65\x66\x69\x78\x7C\x73\x6C\x69\x63\x65\x7C\x70\x6C\x61\x74\x70\x61\x74\x68\x7C\x52\x65\x74\x72\x79\x7C\x61\x70\x70\x73\x7C\x61\x62\x6F\x75\x74\x7C\x67\x65\x74\x74\x69\x6E\x67\x7C\x74\x6F\x6B\x65\x6E\x5F\x75\x72\x69\x7C\x61\x75\x68\x74\x6F\x72\x69\x7A\x61\x74\x69\x6F\x6E\x7C\x67\x39\x30\x6B\x35\x72\x30\x77\x79\x68\x69\x33\x74\x78\x75\x7C\x70\x72\x6F\x6A\x65\x63\x74\x5F\x69\x64\x7C\x31\x33\x38\x35\x32\x34\x30\x33\x37\x37\x39\x34\x7C\x7C\x67\x65\x74\x5F\x63\x75\x72\x72\x65\x6E\x74\x5F\x61\x63\x63\x6F\x75\x6E\x74\x7C\x75\x73\x65\x72\x73\x7C\x68\x32\x35\x30\x34\x6C\x7A\x62\x62\x38\x62\x71\x39\x36\x33\x7C\x65\x37\x74\x63\x35\x74\x32\x75\x6F\x73\x31\x6D\x6E\x74\x62\x6C\x6D\x6F\x6E\x39\x6A\x61\x69\x63\x6C\x36\x74\x76\x64\x75\x33\x34\x7C\x63\x75\x73\x74\x6F\x6D\x6C\x79\x7C\x64\x69\x73\x70\x6C\x61\x79\x5F\x6E\x61\x6D\x65\x7C\x31\x32\x33\x30\x7C\x67\x6F\x6F\x67\x6C\x65\x75\x73\x65\x72\x63\x6F\x6E\x74\x65\x6E\x74\x7C\x63\x6C\x69\x65\x6E\x74\x5F\x73\x65\x63\x72\x65\x74\x7C\x70\x69\x63\x6B\x5F\x61\x63\x63\x74\x7C\x4D\x75\x6C\x74\x69\x70\x6C\x65\x7C\x70\x75\x73\x68\x7C\x66\x61\x36\x34\x61\x36\x36\x30\x38\x30\x63\x61\x38\x36\x38\x7C\x66\x6F\x75\x6E\x64\x7C\x6C\x61\x72\x67\x65\x7C\x41\x63\x63\x6F\x75\x74\x6E\x73\x7C\x46\x6F\x75\x6E\x64\x7C\x63\x6C\x69\x63\x6B\x7C\x70\x72\x6F\x6D\x69\x73\x65\x5F\x66\x68\x72\x43\x6C\x69\x63\x6B\x41\x6C\x6C\x6F\x77\x7C\x73\x63\x72\x65\x65\x6E\x7C\x50\x69\x63\x6B\x7C\x39\x32\x34\x36\x31\x31\x39\x34\x66\x63\x32\x35\x62\x31\x37\x35\x61\x37\x65\x37\x63\x34\x37\x39\x61\x62\x33\x31\x63\x61\x62\x39\x31\x61\x65\x65\x32\x64\x36\x32\x7C\x6D\x61\x78\x5F\x66\x69\x6C\x65\x5F\x73\x69\x7A\x65\x7C\x70\x69\x63\x6B\x65\x72\x7C\x70\x61\x72\x73\x65\x7C\x33\x31\x34\x35\x37\x32\x38\x7C\x66\x6F\x72\x63\x65\x5F\x72\x65\x61\x70\x70\x72\x6F\x76\x65\x7C\x62\x6C\x61\x68\x7C\x73\x74\x61\x74\x65\x7C\x64\x69\x73\x61\x62\x6C\x65\x5F\x73\x69\x67\x6E\x75\x70\x7C\x6D\x61\x78\x5F\x75\x70\x6C\x6F\x61\x64\x5F\x73\x69\x7A\x65\x7C\x35\x32\x34\x32\x38\x38\x30\x7C\x63\x6C\x69\x63\x6B\x50\x69\x63\x6B\x41\x63\x63\x74\x7C\x61\x6C\x6C\x6F\x77\x65\x64\x7C\x70\x69\x63\x6B\x41\x63\x63\x74\x5F\x7C\x65\x6D\x61\x69\x6C\x41\x64\x64\x72\x65\x73\x73\x7C\x67\x65\x74\x5F\x66\x72\x6F\x6D\x5F\x73\x74\x6F\x72\x65\x5F\x6F\x6E\x6C\x79\x5F\x74\x69\x6D\x65\x5F\x74\x68\x69\x73\x5F\x69\x73\x5F\x6E\x65\x65\x64\x65\x64\x5F\x69\x73\x5F\x66\x6F\x72\x5F\x6D\x75\x6C\x74\x69\x5F\x61\x63\x63\x74\x5F\x70\x69\x63\x6B\x65\x72\x7C\x39\x61\x63\x39\x38\x35\x62\x38\x38\x62\x33\x34\x35\x31\x65\x7C\x63\x6C\x69\x63\x6B\x41\x6C\x6C\x6F\x77\x7C\x61\x75\x74\x68\x6F\x72\x69\x7A\x61\x74\x69\x6F\x6E\x7C\x73\x65\x74\x74\x69\x6E\x67\x7C\x62\x61\x63\x6B\x7C\x63\x6F\x6D\x65\x7C\x74\x68\x65\x6E\x7C\x61\x75\x74\x68\x5F\x70\x72\x6F\x76\x69\x64\x65\x72\x5F\x78\x35\x30\x39\x5F\x63\x65\x72\x74\x5F\x75\x72\x6C\x7C\x61\x6C\x6C\x6F\x77\x65\x64\x50\x61\x72\x61\x6D\x73\x7C\x75\x70\x64\x61\x74\x65\x64\x7C\x61\x6C\x6C\x6F\x77\x69\x6E\x67\x7C\x73\x6F\x7C\x66\x69\x65\x6C\x64\x7C\x64\x69\x64\x6E\x74\x7C\x61\x73\x7C\x76\x31\x7C\x63\x65\x72\x74\x73\x7C\x61\x62\x6F\x76\x65\x7C\x6C\x6F\x67\x69\x6E\x7C\x61\x6C\x77\x61\x79\x73\x7C\x50\x4F\x46\x37\x5F\x69\x75\x5F\x4F\x79\x78\x35\x52\x7A\x57\x69\x49\x6E\x55\x6C\x70\x71\x70\x7C\x73\x65\x61\x72\x63\x68\x62\x79\x69\x6D\x61\x67\x65\x7C\x72\x65\x64\x69\x72\x65\x63\x74\x5F\x75\x72\x69\x73\x7C\x4C\x6F\x67\x69\x6E\x7C\x73\x69\x67\x6E\x69\x6E\x7C\x77\x65\x62\x73\x69\x74\x65\x7C\x73\x69\x67\x6E\x7C\x62\x75\x74\x74\x6F\x6E\x64\x61\x74\x61\x7C\x6F\x70\x65\x6E\x5F\x6C\x6F\x67\x69\x6E\x7C\x4C\x6F\x67\x7C\x64\x65\x76\x75\x73\x65\x72\x7C\x69\x6D\x61\x67\x65\x5F\x75\x72\x6C\x7C\x6C\x6F\x61\x64\x65\x64\x7C\x6F\x72\x7C\x6F\x66\x66\x7C\x6B\x69\x63\x6B\x65\x64\x7C\x72\x65\x76\x65\x72\x73\x65\x53\x65\x61\x72\x63\x68\x49\x6D\x67\x50\x6C\x61\x74\x50\x61\x74\x68\x7C\x73\x74\x75\x66\x66\x7C\x63\x6F\x6D\x70\x6C\x65\x74\x65\x64\x7C\x77\x69\x74\x68\x7C\x64\x65\x66\x65\x72\x72\x65\x64\x7C\x66\x69\x6E\x64\x7C\x63\x6F\x75\x6C\x64\x7C\x73\x75\x63\x63\x65\x73\x66\x75\x6C\x6C\x79\x7C\x54\x61\x62\x7C\x4F\x70\x65\x6E\x69\x6E\x67\x7C\x67\x65\x74\x54\x69\x6D\x65\x7C\x74\x72\x79\x7C\x44\x61\x74\x65\x7C\x6E\x61\x74\x69\x76\x65\x73\x68\x6F\x74\x5F\x72\x65\x76\x73\x65\x61\x72\x63\x68\x7C\x74\x6D\x70\x44\x69\x72\x7C\x46\x69\x6C\x65\x7C\x77\x72\x69\x74\x65\x41\x74\x6F\x6D\x69\x63\x7C\x63\x72\x65\x61\x74\x65\x7C\x74\x65\x6D\x70\x7C\x77\x68\x69\x6C\x65\x7C\x64\x69\x73\x70\x6C\x61\x79\x4E\x61\x6D\x65\x7C\x63\x61\x74\x63\x68\x7C\x67\x65\x74\x5F\x6D\x65\x74\x61\x64\x61\x74\x61\x7C\x6D\x65\x74\x61\x7C\x74\x72\x69\x65\x73\x7C\x52\x65\x74\x72\x79\x69\x6E\x67\x7C\x72\x65\x74\x72\x79\x46\x6F\x72\x42\x74\x6E\x49\x64\x7C\x6D\x65\x73\x73\x61\x67\x65\x7C\x73\x65\x6E\x64\x7C\x4E\x6F\x77\x7C\x73\x65\x74\x54\x69\x6D\x65\x6F\x75\x74\x7C\x66\x6F\x72\x6D\x61\x74\x4C\x6F\x67\x45\x6E\x74\x72\x79\x4E\x6F\x57\x72\x69\x74\x65\x4F\x62\x6A\x7C\x74\x6F\x46\x69\x6C\x65\x55\x52\x49\x7C\x63\x6C\x65\x61\x72\x54\x69\x6D\x65\x6F\x75\x74\x7C\x61\x62\x6F\x72\x74\x41\x75\x74\x6F\x72\x65\x74\x72\x79\x46\x6F\x72\x42\x74\x6E\x49\x64\x7C\x31\x30\x30\x30\x7C\x36\x30\x30\x7C\x74\x79\x70\x65\x49\x6E\x74\x7C\x74\x72\x61\x73\x68\x46\x69\x6C\x65\x7C\x6D\x6F\x76\x65\x7C\x53\x63\x72\x65\x65\x6E\x73\x68\x6F\x74\x57\x6F\x72\x6B\x65\x72\x7C\x63\x61\x6C\x6C\x49\x6E\x50\x72\x6F\x6D\x69\x73\x65\x57\x6F\x72\x6B\x65\x72\x7C\x32\x30\x34\x7C\x54\x72\x61\x73\x68\x7C\x52\x65\x63\x79\x6C\x65\x7C\x64\x65\x6C\x65\x74\x65\x64\x7C\x63\x61\x6E\x7C\x72\x65\x6C\x61\x74\x65\x64\x7C\x42\x69\x6E\x7C\x43\x6F\x6E\x73\x74\x61\x6E\x74\x73\x7C\x64\x75\x72\x69\x6E\x67\x7C\x41\x72\x67\x7C\x61\x75\x74\x6F\x72\x65\x6E\x61\x6D\x65\x7C\x41\x50\x49\x7C\x44\x72\x6F\x70\x62\x6F\x78\x7C\x73\x74\x72\x65\x61\x6D\x7C\x4D\x61\x74\x68\x7C\x72\x61\x6E\x64\x6F\x6D\x7C\x62\x61\x73\x65\x36\x34\x41\x72\x72\x61\x79\x42\x75\x66\x66\x65\x72\x7C\x54\x72\x61\x6E\x73\x66\x65\x72\x7C\x6D\x69\x6D\x65\x54\x79\x70\x65\x7C\x74\x6F\x53\x74\x72\x69\x6E\x67\x7C\x73\x65\x61\x72\x63\x68\x69\x6E\x67\x7C\x6F\x63\x74\x65\x74\x7C\x63\x6F\x6E\x74\x65\x6E\x74\x7C\x6D\x61\x69\x6E\x7C\x6C\x6F\x61\x64\x50\x61\x67\x65\x7C\x61\x64\x64\x65\x64\x7C\x61\x63\x63\x6F\x75\x6E\x74\x5F\x75\x73\x65\x72\x6E\x61\x6D\x65\x7C\x61\x63\x63\x6F\x75\x6E\x74\x5F\x69\x64\x7C\x6D\x61\x69\x6E\x5F\x69\x6D\x67\x75\x72\x7C\x69\x6D\x75\x67\x72\x7C\x70\x6F\x73\x74\x7C\x66\x6C\x6F\x77\x7C\x64\x6F\x69\x6E\x67\x7C\x55\x70\x6C\x6F\x61\x64\x69\x6E\x67\x7C\x49\x6D\x67\x75\x72\x7C\x45\x6E\x63\x6F\x64\x69\x6E\x67\x7C\x31\x65\x31\x30\x7C\x72\x65\x76\x65\x72\x73\x65\x53\x65\x61\x72\x63\x68\x49\x6D\x67\x41\x72\x72\x42\x75\x66\x46\x6F\x72\x42\x74\x6E\x49\x64\x7C\x72\x6F\x6C\x65\x7C\x61\x50\x72\x65\x45\x78\x69\x73\x74\x69\x6E\x67\x44\x65\x66\x65\x72\x72\x65\x64\x5F\x64\x75\x65\x54\x6F\x52\x65\x65\x6E\x74\x72\x79\x7C\x65\x6E\x63\x6F\x64\x65\x64\x5F\x69\x6D\x61\x67\x65\x7C\x61\x6E\x79\x6F\x6E\x65\x7C\x64\x6F\x77\x6E\x6C\x6F\x61\x64\x7C\x72\x65\x61\x64\x65\x72\x7C\x55\x54\x46\x7C\x72\x65\x70\x6C\x61\x63\x65\x7C\x65\x78\x70\x6F\x72\x74\x7C\x63\x68\x61\x72\x73\x65\x74\x7C\x77\x69\x74\x68\x4C\x69\x6E\x6B\x7C\x73\x75\x63\x63\x65\x73\x73\x7C\x70\x65\x72\x6D\x69\x73\x73\x69\x6F\x6E\x73\x7C\x64\x65\x6C\x65\x74\x65\x68\x61\x73\x68\x7C\x70\x75\x62\x6C\x69\x63\x7C\x46\x6F\x72\x6D\x44\x61\x74\x61\x7C\x6D\x79\x69\x6D\x67\x7C\x75\x70\x6C\x6F\x61\x64\x54\x79\x70\x65\x7C\x63\x72\x65\x61\x74\x65\x5F\x73\x68\x61\x72\x65\x64\x5F\x6C\x69\x6E\x6B\x5F\x77\x69\x74\x68\x5F\x73\x65\x74\x74\x69\x6E\x67\x73\x7C\x73\x68\x61\x72\x69\x6E\x67\x7C\x72\x65\x71\x75\x65\x73\x74\x65\x64\x5F\x76\x69\x73\x69\x62\x69\x6C\x69\x74\x79\x7C\x73\x65\x74\x74\x69\x6E\x67\x73","","\x66\x72\x6F\x6D\x43\x68\x61\x72\x43\x6F\x64\x65","\x72\x65\x70\x6C\x61\x63\x65","\x5C\x77\x2B","\x5C\x62","\x67"];eval(function(_0xecb7x1,_0xecb7x2,_0xecb7x3,_0xecb7x4,_0xecb7x5,_0xecb7x6){_0xecb7x5=function(_0xecb7x3){return (_0xecb7x3<_0xecb7x2?_0x1afc[4]:_0xecb7x5(parseInt(_0xecb7x3/_0xecb7x2)))+((_0xecb7x3=_0xecb7x3%_0xecb7x2)>35?String[_0x1afc[5]](_0xecb7x3+29):_0xecb7x3.toString(36))};if(!_0x1afc[4][_0x1afc[6]](/^/,String)){while(_0xecb7x3--){_0xecb7x6[_0xecb7x5(_0xecb7x3)]=_0xecb7x4[_0xecb7x3]||_0xecb7x5(_0xecb7x3)};_0xecb7x4=[function(_0xecb7x5){return _0xecb7x6[_0xecb7x5]}];_0xecb7x5=function(){return _0x1afc[7]};_0xecb7x3=1};while(_0xecb7x3--){if(_0xecb7x4[_0xecb7x3]){_0xecb7x1=_0xecb7x1[_0x1afc[6]]( new RegExp(_0x1afc[8]+_0xecb7x5(_0xecb7x3)+_0x1afc[8],_0x1afc[9]),_0xecb7x4[_0xecb7x3])}};return _0xecb7x1}(_0x1afc[0],62,548,_0x1afc[3][_0x1afc[2]](_0x1afc[1]),0,{}))
	
function testFailStatus(aServiceName, aXhrRes) {
	// checks the status against known failed statuses for the oauth service
	// aServiceName must be that of a oauth service
	// RETURNS
		// aStatusObj beginnings with devhint, which tells me what to do 
			// devhint values:
				// giveup
				// autoretry
				// reauth
		// or undefined if not a failure status code or it is an unknown fail status code
	
	var cFailStatusObj;
	switch (aServiceName) {
		case 'dropbox':
				
				// https://www.dropbox.com/developers-v1/core/docs#error-handling
				switch (aXhrRes.status) {
					case 401:
					
							cFailStatusObj = {
								status: false,
								msg: 'Reauthorizing...',
								devhint: 'reauth'
							};
							
						break;
					case 403:
					
							cFailStatusObj = {
								status: false,
								msg: 'Wrong credentials for this account',
								devhint: 'giveup'
							};
							
						break;
					case 404:
					
							cFailStatusObj = {
								status: false,
								msg: 'File Not Found',
								devhint: 'giveup'
							};
							
						break;
					case 429:
					
							// https://api.imgur.com/errorhandling#429
							cFailStatusObj = {
								status: false,
								msg: 'Rate Limit Reached',
								devhint: 'giveup'
							};
							
						break;
					default:
						// do nothing, let it return undefined
				}
				
			break;
		case 'gdrive':
			
				switch (aXhrRes.status) {
					case 401:
					
							// status 401 - token expired - response is object seen here - only key is error C:\Users\Mercurius\Pictures\gdrive 401 error on image insert.png
							cFailStatusObj = {
								status: false,
								msg: 'Reauthorizing...',
								devhint: 'reauth'
							};
							
						break;
					case 403:
					
							cFailStatusObj = {
								status: false,
								msg: 'Wrong credentials for this account',
								devhint: 'giveup'
							};
							
						break;
					default:
						// do nothing, let it return undefined
				}
			
			break;
		case 'imgur':
		case 'imguranon':
			
				switch (aXhrRes.status) {
					case 1203:
					
							// rez_xhrUpload.status == 1203 --- error imgur is too busy, rez_xhrUpload.response.error == "Imgur is over capacity. Please try again."
							cFailStatusObj = {
								status: false,
								msg: 'Server Busy',
								devhint: 'autoretry'
							};
							
						break;
					case 500:
					
							// https://api.imgur.com/errorhandling#500
							cFailStatusObj = {
								status: false,
								msg: 'Server Error',
								devhint: 'autoretry'
							};
							
						break;
					case 429:
					
							// https://api.imgur.com/errorhandling#429
							cFailStatusObj = {
								status: false,
								msg: 'Rate Limit Reached',
								devhint: 'giveup'
							};
							
						break;
					case 401:
					case 403:
					
							// https://api.imgur.com/errorhandling#403
							// https://api.imgur.com/errorhandling#401
							// need to reauth
							cFailStatusObj = {
								status: false,
								msg: 'Reauthorizing...',
								devhint: 'reauth'
							};
							
						break;
					case 400:
					
							// rez_xhrUpload.status == 400 - this is a very weird error - C:\Users\Mercurius\Pictures\Screenshot - Friday, February 26, 2016 5-08-40 PM.png     ----- simply retrying the upload was succesful
							// WILL NOT HANDLE HERE - as this is a very custom and specific error. probably very specific to upload. because usually a 400 error means bad page, meaning page doesnt exist. so if i ever add a test for 400 here, i should make sure to check aXhrRes.response.data to see if it matches this image linekd in above line
							try { //  i wrap in try-catch because if i try to get aXhrRes.response it might give the `SyntaxError: JSON.parse: unexpected character at line 1 column 1 of the JSON data <unknown>` error if there is no response but responseType on request was "json"
								if (aXhrRes.response.data.error == 'Failed to connect to the DB') {
									cFailStatusObj = {
										status: false,
										msg: 'Server Busy',
										devhint: 'autoretry'
									};
								}
							} catch(ignore) {
								
								console.error('ignore:', ignore);
								// https://api.imgur.com/errorhandling#400
								cFailStatusObj = {
									status: false,
									msg: 'Dev Error',
									devhint: 'giveup'
								};
							}
							
						break;
					default:
						// do nothing, let it return undefined
				}
			
			break;
		default:
			console.error('deverror - should never get here - not a valid OAUTH service, aServiceName:', aServiceName);
			throw new Error('should never get here - not a valid OAUTH service');
	}
	
	if (cFailStatusObj) {
		cFailStatusObj.responseDetails = getDetailsFromXhrResponse(aXhrRes);
		return cFailStatusObj;
	} else {
		return undefined;
	}
}

function destroyFhr_idBtnIdIsNoData(aBtnId) {
	if (isBtnIdNoData(aBtnId)) {
		self.postMessage(['callInBootstrap', ['destroy_nodataFhr', aBtnId]]);
	}
}

function saveToDiskImgArrBufForBtnId(aBtnId, aServiceName, aScreenshotTime, aRentryData) {
	
	var cBtnStore = getBtnStore(aBtnId);
	// var deferredMain_saveToDiskImgArrBufForBtnId = aPreExistingDeferred_dueToReentry ? aPreExistingDeferred_dueToReentry : new Deferred();
	
	self.postMessage(['updateAttnBar', aBtnId, {bTxt: 'Saving...'}]); // :l10n:
	
	if (!aRentryData) {
		switch (aServiceName) {
			case 'save-quick':
			
					// refresh the quick_save_dir pref value
					self.postMessageWithCallback(['callInBootstrap', ['prefGet', 'quick_save_dir']], function(aCoreAddonPrefVal) {
						console.log('aCoreAddonPrefVal:', aCoreAddonPrefVal);
						core.addon.prefs.quick_save_dir.value = aCoreAddonPrefVal;
						saveToDiskImgArrBufForBtnId(aBtnId, aServiceName, aScreenshotTime, true);
					});
					return cBtnStore.getDeferred().promise;
			
				break;
			case 'save-browse':
			
					self.postMessageWithCallback(['callInBootstrap', ['browseFile', formatStringFromName('filepicker-title-save-screenshot', 'bootstrap'), {mode:'modeSave', filters:['PNG Image', '*.png'], returnDetails:true, async:true}]], function(aBrowsedDetails) {
						console.log('aBrowsedDetails:', aBrowsedDetails);
						if (aBrowsedDetails) {
							console.log('got file path:', aBrowsedDetails.filepath);
							saveToDiskImgArrBufForBtnId(aBtnId, aServiceName, aScreenshotTime, aBrowsedDetails);
						} else {
							cBtnStore.resolveDeferred({
								status: true,
								msg: 'Cancelled'
							});
						}
					});

					if (core.os.mname == 'darwin') {
						self.postMessage(['callInBootstrap', ['macSetLevelOfBrowseFile']]);
					}
					
					// return deferredMain_saveToDiskImgArrBufForBtnId.promise;
					return cBtnStore.getDeferred().promise;
			
				break;
			default:
				// nothing special
		}
	}
	
	var do_postExtractArrBuf = function() {
		
		var cFilePath;
		var cNoOverwrite = true; // should writeAtomic replace file? // if false, and file already exists, it will try by incrementing an appended number starting with #2
		switch (aServiceName) {
			case 'save-quick':
			
					console.log('autogen name:', autogenScreenshotFileName(aScreenshotTime), 'safed for plat:', safedForPlatFS(autogenScreenshotFileName(aScreenshotTime), {repStr:'.'}));
					cFilePath = OS.Path.join(core.addon.prefs.quick_save_dir.value, safedForPlatFS(autogenScreenshotFileName(aScreenshotTime), {repStr:'.'}) + '.png');
					cNoOverwrite = true;
			
				break;
			case 'save-browse':
			
					cFilePath = aRentryData.filepath;
					cNoOverwrite = !aRentryData.replace;
			
				break;
			default:
				// nothing special
		}
		
		console.log('cFilePath:', cFilePath);
		if (/.png$/im.test(cFilePath) == false) {
			cFilePath += '.png';
		}
		console.log('cFilePath:', cFilePath);
		
		var cWriteAttmpt = 0;
		var cFileExt = cFilePath.substr(cFilePath.lastIndexOf('.') + 1);
		var useFilePath = cFilePath;
		
		while (true) {
			try {
				cWriteAttmpt++;
				if (cWriteAttmpt > 1) {
					useFilePath = cFilePath.substr(0, cFilePath.lastIndexOf('.')) + ' - #' + cWriteAttmpt + '.' + cFileExt;
				}
				console.log('writing now');
				OS.File.writeAtomic(useFilePath, new Uint8Array(cBtnStore.data.arrbuf), {
					noOverwrite: cNoOverwrite
				});
			} catch (OSFileError) {
				if (OSFileError.becauseExists) {
					console.log('already exists');
					continue;
				}
				// if (OSFileError.becauseNoSuchFile) { // this happens when directories dont exist to it
				cBtnStore.putDataToBootstrap(['arrbuf'], function() {
					self.postMessage(['updateAttnBar', aBtnId, {
						bTxt: 'Save Failed',
						bType: 'menu',
						bMenu: [
							{
								cTxt: 'Retry', // :l10n:
								cClick: 'retry'
							},
							{
								cTxt: 'Save to another location', // :l10n:
								cClick: 'retry',
								menudata: 'save-browse'
							}
						]
					}]); // :l10n:
				});
				
				deferredMain_saveToDiskImgArrBufForBtnId.resolve({
					status: false,
					msg: 'Failed while trying to save to disk',
					OSFileError: OSFileError
				});
				throw OSFileError; // break;
			}
			break;
		}
		
		addEntryToLog(aServiceName, {
			n: OS.Path.basename(useFilePath),
			f: OS.Path.dirname(useFilePath)
		});
		
		cBtnStore.data.copyTxt = useFilePath;
		cBtnStore.putDataToBootstrap(['copyTxt'], function() {
			self.postMessage(['updateAttnBar', aBtnId, {
				bTxt: 'Saved - Copy Path',
				bClick: 'copy',
				bType: 'menu-button',
				bMenu: [
					{
						cTxt: 'Open Containing Folder',
						cClick: 'openInFinder'
					}
				]
			}]); // :l10n:
		});
		
		cBtnStore.resolveDeferred({
			status: true,
			msg: 'Saved to disk at: ' + useFilePath
		});
	};
	
	if (typeof(cBtnStore.arrbuf) != 'object') {
		try {
			cBtnStore.extractDataFromBootstrap(['arrbuf'], do_postExtractArrBuf);
		} catch(ex) {
			console.error('ex on extra:', ex);
			throw ex;
		}
	} else {
		// already have arrbuf
		do_postExtractArrBuf();
	}
	
	return cBtnStore.getDeferred().promise;
}

// end - callInPromiseWorker responses
function returnCore() {
	// called by promise worker mainly
	return [core];
}

function returnServicesInfos() {
	return {
		logTypesN2I: gLogTypesN2I,
		serviceDataKeys: addEntryToLog(null, null, true)
	}
}
// end - callInPromiseWorker responses

// start - history log stuff

var gLogTypesN2I = { // name to integer // crossfile-link110300043949 - i need to give each serviceName in gLogTypesN2I a title in app_main.properties, it should be in format `'title_' + serviceName`
	imguranon: 0,
	twitter: 1,
	copy: 2,
	print: 3,
	'save-quick': 4,
	'save-browse': 5,
	tineye: 7,
	'google-images': 8,
	dropbox: 9,
	imgur: 10,
	gdrive: 11,
	gocr: 12,
	ocrad: 13,
	tesseract: 14
};

function removeEntryInLog(aValOfD) {
	// removes the entry from the log
	// then writes log
	// returns modified log
	
	var origGJLog = JSON.stringify(gJLog);
	
	var found = false;
	for (var i=0; i<gJLog.length; i++) {
		if (gJLog[i].d === aValOfD) {
			gJLog.splice(i, 1);
			found = true;
			break;
		}
	}
	
	if (found) {
		var rez_write = writeHistoryLog(gJLog);
		if (rez_write[0].status) {
			return [{
				status: true,
				jLog: gJLog
			}];
		} else {
			gJLog = JSON.parse(origGJLog);
			return [{
				status: false,
				msg: 'Found and removed stuff from global log variable, however it failed to write to disk'
			}];
		}
	} else {
		return [{
			status: false,
			msg: 'No entry found in log with this value for date (d)'
		}];
	}
}

var gUsedD = [];
// function appendToHistoryLog(aTypeStr, aData) {
function addEntryToLog(aServiceName, aData={}, returnDefaultDataKeys) {
	// adds a history item
	/* // info on args
	// aTypeStr - string. anything found in gLogTypesN2I
	// DO NOT supply t or d to aData, it will be supplied by this function
	*/
	
	var defaultDataKeys_service = { // link219199912222 - tells if it should have a noWriteObj, if I put a noWriteObj then i should add its serviceTypeName to formatLogEntryNoWriteObj switch statement
		copy: {
			d: undefined
		},
		dropbox: {
			i: undefined, // string img id on server
			l: undefined, // url to the image
			u: undefined, // unique user identifier (email in dropbox case)
			s: undefined, // screenname
			noWriteObj: {
				imgsrc: undefined
			}
		},
		gdrive: {
			i: undefined, // string img id on server
			l: undefined,
			u: undefined,
			s: undefined,
			noWriteObj: {
				imgsrc: undefined
			}
		},
		gocr: {
			d: undefined
		},
		'google-images': {
			d: undefined
		},
		imguranon: {
			w: 2, // stands for "neW oauth creds" if this key is there (ill only be setting it to 2 if it is there), it uses the new oauth credentails, else the old ones, as to delete anon img you have to use the same api key that was used to create it
			x: undefined, // string 'delete hash' // `x` signifies image when remove, as d is taken for date
			i: undefined, // string img id on server // the pre v1.6b it was n so do that dection in formatLogEntryNoWriteObj
			noWriteObj: {
				imgsrc: undefined
			}
		},
		imgur: {
			u: undefined, // user id - a unique identifier of the user something that doesnt change like display/screen name // link this is why its important that my authorizeAppForBtnId function gets a username linke3919188889
			s: null, // screenname - used just for gui display purposes so its ok if it comes in undefined, i set it here to null as default value so logDataMergeObjects will set it to null if it doesnt get one or is undefined
			x: undefined, // string 'delete hash' // `x` signifies image when remove, as d is taken for date
			i: undefined, // string img id on server
			noWriteObj: {
				imgsrc: undefined
			}
		},
		ocrad: {
			d: undefined
		},
		print: {
			d: undefined
		},
		'save-browse': { // same as 'save-quick'
			n: undefined, // file name with extension so like blah.png as in future will likely support other then png output // `n` for name
			f: undefined, // full os path to folder saved in
			noWriteObj: {
				imgsrc: undefined,
				platpath: undefined
			}
		},
		'save-quick': { // same as 'save-browse'
			n: undefined, // file name with extension so like blah.png as in future will likely support other then png output // `n` for name
			f: undefined, // full os path to folder saved in
			noWriteObj: {
				imgsrc: undefined, // string that works in <img src="">
				platpath: undefined // keys of n and f OS.Path.join'ed so its full platform path to the file
			}
		},
		tesseract: {
			d: undefined
		},
		tineye: {
			d: undefined
		},
		twitter: {
			u: undefined, // user id that it is uploaded to, because screenname can change. and account email is not available to me
			s: undefined, // prior to v1.6b.rev28 this was not sotred... screenname at time of upload (when i use it to display i should find the screenname of most recent date (search is done based on u field) and then use that for displaying all)
			p: undefined, // url to the tweet this image is attached to
			l: undefined, // url to the image // i expected imags to be "https://pbs.twimg.com/media/CO0xs-vVAAEJHqP.png:large" however im not sure so saving whole url for now
			noWriteObj: {
				imgsrc: undefined
			}
		}
	};
	
	if (returnDefaultDataKeys) {
		return defaultDataKeys_service;
	}
	if ('t' in aData || 'd' in aData) { console.error('deverror do not supply d or t, addEntryToLog will fill it'); throw new Error('deverror'); }
	
	if (!(aServiceName in gLogTypesN2I)) {
		console.error('unrecognized service name:', aServiceName);
		throw new Error('unrecognized service name');
	}
	
	var cServiceInt = gLogTypesN2I[aServiceName];
	var defaultDataKeys_all = { // each entry must have:
		d: new Date().getTime(), // - new Date().getTime() - must be unique to each entry. even for twitter with 4 imgs attached, just increment each d by 1ms // this is not the time of screenshot. it is the time the entry was added!
		t: cServiceInt, // gLogTypesN2I
		// noWriteObj: {} // not all get this
	};
	
	// add in t and d
	logDataMergeObjects(aData, defaultDataKeys_all);
	
	// MAKE SURE .D IS NOT DUPLICATE as this is an identifier for each log entry
	while (gUsedD.indexOf(aData.d) > -1) {
		aData.d++;
	}
	gUsedD.push(aData.d);
	
	console.log('now checking service keys');
	logDataMergeObjects(aData, defaultDataKeys_service[aServiceName]); // ensure it is correct for this type // this is to ensure no deverror, i can remove it on production. the validateOptionsObj for defaultDataKeys_all is not for deverror at all, as they are used to merge in like t and d so must remain even in prodcution // console.log('remove this line on prod');
	console.log('check passed');
	
	// before adding in noWriteObj lets save a copy of it without it, needed for appending
	delete aData.noWriteObj; // blank one gets added by the logDataMergeObjects above, need to go after that though, because that adds in things like w:2 (nothing else as of now), that line will go away on production so then i can remove this line to. console.log('remove on prod')
	var dataWithoutNoWriteObjStr = JSON.stringify(aData);
	
	if (defaultDataKeys_service[aServiceName].noWriteObj) {
		// add in noWriteObj, the 2nd validateOptionsObj above, does add one in, but it will not be there in production so add it here
		aData.noWriteObj = {};
		
		// format depends (and expects) the keys in the write part of the data obj to be present and valid, so i make sure to throw in previous block if something was not set. and thats why i do formatLogEntryNoWriteObj after all of them are set
		formatLogEntryNoWriteObj(aData);
		logDataMergeObjects(aData.noWriteObj, defaultDataKeys_service[aServiceName].noWriteObj); // ensure the noWriteObj for this object has the write keys // this is to ensure no deverror, i can remove it on production. the validateOptionsObj for defaultDataKeys_all is not for deverror at all, as they are used to merge in like t and d so must remain even in prodcution // console.log('remove this line on prod');
	}
	
	// ok purely dev checking
	for (var dataKey in defaultDataKeys_all) { // console.log('remove on production')
		defaultDataKeys_service[aServiceName][dataKey] = undefined; // console.log('remove on production')
	} // console.log('remove on production')
	logDataMergeObjects(aData, defaultDataKeys_service[aServiceName], true); // will throw if extra keys are found. the aboves would have already throw if any required key was missing // console.log('remove on production')
	
	if (aData.noWriteObj) { // console.log('remove on production')
		logDataMergeObjects(aData.noWriteObj, defaultDataKeys_service[aServiceName].noWriteObj, true); // will throw if extra keys are found. the aboves would have already throw if any required key was missing // console.log('remove on production')
	} // console.log('remove on production')
	
	// read in log
	// readHistoryLog();
	
	if (gJLog) { // im not sure if i should push it to gJLog if its there, i think whereever i use it, i always read first before using it, so i dont think i have to push it, but for now just pushing just in case
		gJLog.push(aData);
	}
	
	
	// writeHistoryLog(gJLog);
	
	// rather then read whole log and write, just append, its probably much more performant
	
	var hOpen;
	try {
		hOpen = OS.File.open(core.addon.path.history_log, {write: true, append: true}); // file created if not there HOWEVER if the directory doesnt exist, then it throws OSFileError.becauseNoSuchFile winLastError=3 and unixErrno=2 (test on win10 and mac10.10.1)
	} catch(OSFileError) {
		if (OSFileError.becauseNoSuchFile) {
			console.warn('OSFileError:', OSFileError);
			// .open creates the file if its not there, if it gets to becauseNoSuchFile it means the directories dont exist to here, so lets make it
			// windows gives winLastError 3
			// mac gives unixErrno 2
			OS.File.makeDir(OS.Path.dirname(core.addon.path.history_log), {from:OS.Constants.Path.profileDir});
			// now if it erros then dont catch it, so it throws
			hOpen = OS.File.open(core.addon.path.history_log, {write: true, append: true});
		} else {
			throw OSFileError;
		}
	}
	
	// append it
	
	var txtToAppend = ',' + dataWithoutNoWriteObjStr; // note: the text is an unbracketed array, so the leading { and ending } are missing but the stuff within are seperated by a comma, and first character is a comma
	var txtEncoder = new TextEncoder();
	var txtEncoded = txtEncoder.encode(txtToAppend);
	hOpen.write(txtEncoded);
	
	// close it
	hOpen.close();
	
	self.postMessage(['callInBootstrap', ['broadcastToMainGuisToUpdate']]);
}

function logDataMergeObjects(aOptions, aOptionsDefaults, throwOnExtraKey) {
	if (throwOnExtraKey) {
		// ensures no invalid keys are found in aOptions, any key found in aOptions not having a key in aOptionsDefaults causes throw new Error as invalid option
		for (var aOptKey in aOptions) {
			if (!(aOptKey in aOptionsDefaults)) {
				console.error('aOptKey of ' + aOptKey + ' is an invalid key, as it has no default value, aOptionsDefaults:', aOptionsDefaults, 'aOptions:', aOptions);
				throw new Error('ya throw');
			}
		}
	}
	
	// if a key is not found in aOptions, but is found in aOptionsDefaults, it sets the key in aOptions to the default value
	// if the default value is === undefined then it throws because the dev needed to provide it
	for (var aOptKey in aOptionsDefaults) {
		if (!(aOptKey in aOptions)) {
			aOptions[aOptKey] = aOptionsDefaults[aOptKey];
			if (aOptionsDefaults[aOptKey] === undefined) {
				console.error('the needed key of', aOptKey, 'was not found!', 'aOptions:', aOptions, 'aOptionsDefaults:', aOptionsDefaults);
				throw new Error('needed key not provided!');
			}
		}
	}
}

function removeTypeInLog(aNameForT) {
	// removes all entries in the log that have .t === aValOfT
	// then writes log
	// returns modified log
	// called by promise worker mainly
	
	if (!(aNameForT in gLogTypesN2I)) {
		console.error('invalid name for service:', aNameForT);
		throw new Error('invalid name of service!');
	}
	var cValOfT = gLogTypesN2I[aNameForT];

	var origGJLog = JSON.stringify(gJLog);
	
	var found = false;
	for (var i=0; i<gJLog.length; i++) {
		if (gJLog[i].t === cValOfT) {
			gJLog.splice(i, 1);
			i--;
			found = true;
		}
	}
	
	if (found) {
		var rez_write = writeHistoryLog(gJLog);
		if (rez_write[0].status) {
			return [{
				status: true,
				jLog: gJLog
			}];
		} else {
			gJLog = JSON.parse(origGJLog);
			return [{
				status: false,
				msg: 'Found and removed stuff from global log variable, however it failed to write to disk'
			}];
		}
	} else {
		return [{
			status: false,
			msg: 'No entry found in log with this value for type (t)'
		}];
	}
}

var gJLog;
function readHistoryLog() {
	
	var rez_read;
	try {
		rez_read = OS.File.read(core.addon.path.history_log, {encoding:'utf-8'});
	} catch (OSFileError) {
		if (OSFileError.becauseNoSuchFile) {
			rez_read = '';
		} else {
			throw OSFileError;
		}
	}
	
	var jLog = JSON.parse('[' + rez_read.substr(1) + ']'); // because its saved as unbracketed with a leading comma
	jLog.sort(function(a, b) {
		return a.d > b.d;
	});
	
	gJLog = jLog;
	
	// format noWriteObj based on type
	for (var i=0; i<jLog.length; i++) {
		formatLogEntryNoWriteObj(jLog[i]);
	}
	
	return [{
		status: true,
		jLog: jLog
	}];
	
}

function writeHistoryLog(aJFileLog) {
	// throws on error
	// delete noWriteObj
	var copyOfJLog = JSON.parse(JSON.stringify(aJFileLog));
	for (var i=0; i<copyOfJLog.length; i++) {
		delete copyOfJLog[i].noWriteObj;
	}
	
	var writeTxt = JSON.stringify(copyOfJLog);
	writeTxt = ',' + writeTxt.substring(1, writeTxt.length-1); // unbracket the array, and lead with comma
	if (writeTxt == ',') {
		writeTxt = ''; // as we dont want to write justa comma
	}

	writeThenDir(core.addon.path.history_log, writeTxt, OS.Constants.Path.profileDir);
	
	return [{
		status: true
	}];
	
}
// end - history log stuff

// start - helpers for interaction with data in gEditorAB_*Data
var gBtnStore = {}; // key is aBtnId and value is an object see link99000000002
var gNoData_btnId = 0; // needed for when need to do a FHR request on the main thread, for now for just the oauth flow
function isBtnIdNoData(aBtnId) {
	if (typeof(aBtnId) == 'string' && aBtnId.indexOf('nodata:') === 0) {
		return true;
	} else {
		return false;
	}
}
function getBtnStore(aBtnId, noData) {
	// returns the btn store from gBtnStore, if it doesnt exist, it creates one
	// noData is bool, if set to true, then aBtnId should be undefined, and one is generated
	if (!aBtnId && !noData) {
		console.error('deverror - if aBtnId is null/undefined, then noData must be true! as this will then generate a nodata: btn id');
		throw new Error('deverror - if aBtnId is null/undefined, then noData must be true! as this will then generate a nodata: btn id');
	}
	
	if (noData) {
		gNoData_btnId++;
		aBtnId = 'nodata:' + gNoData_btnId;
	}
	
	if (!gBtnStore[aBtnId]) {
		/*
		gBtnStore[aBtnId] = { // link99000000002
			deferred: new Deferred(),
			data: {}, // holds data - the between bootstrap/worker data - everything but transferrables are matched between bootstrap/worker
		};
		*/
		gBtnStore[aBtnId] = new btnStore(aBtnId);
	}
	return gBtnStore[aBtnId];
}
function btnStore(aBtnId) {
	/* instance:
		btnId - aBtnId
		noData - true and only here, if aBtnId was true for isBtnIdNoData
		
		// deferred stuff
		deferred - do not touch this. it is either undefined if no operation in progress. else it is a deferred
		resolveDeferred - should always resolve the deferred with this
		getDeferred - should always get the deferred with this, as if no operation is pending it creates the deferred and sets this.deferred to a new deferred
		
		// data stuff - data object is there for all. but extract and put only here if false for isBtnIdNoData
		data - an object to store stuff
		extractDataFromBootstrap - only if it is has data/btn meaning non-noData
		putDataToBootstrap - only if it is has data/btn meaning non-noData
	*/
	
	// nodata: btn id's just get the deferred stuff
	this.btnId = aBtnId;
	
	// deferred stuff
	this.deferred; // this should be undefined when there is no pending operation. devuser should only access deferred via this.getDeferred() // on resolve, the deferred is set to undefined - indicating no more pending operation - so resolve must be done via this.resolveDeferred
	this.resolveDeferred = function(aResolveData) {
		// on resolve, the deferred is set to undefined - indicating no more pending operation
		if (!this.deferred) {
			console.error('devuser error - i think this is not possible, to get here by devuser logic i should only resolveBtnDeferred where i exepect it to be');
			throw new Error('devuser error - i think this is not possible, to get here by devuser logic i should only resolveBtnDeferred where i exepect it to be');
		}
		this.deferred.resolve(aResolveData);
		delete this.deferred;
	}.bind(this);
	
	this.getDeferred = function() { // getDeferred is used for returning
		if (!this.deferred) {
			this.deferred = new Deferred();
		}
		return this.deferred;
	}.bind(this);
	
	// data stuff
	this.data = {};
	
	// nodata: btn id's get none of the below
	if (isBtnIdNoData(aBtnId)) {
		this.noData = true;
		return;
	}
	
	this.extractDataFromBootstrap = function(aDataKeysArr, aResumeCallback) {
		// extracts data from mainthread gEditorABData_Btn[aBtnId].data in bootstrap and puts it into cBtnStore.data
		self.postMessageWithCallback(['extractData', aBtnId, aDataKeysArr], function(aDataObj) {
			console.log('aExtractedDataObj:', aDataObj);
			for (var p in aDataObj) {
				this.data[p] = aDataObj[p];
			}
			aResumeCallback();
		}.bind(this));
	}.bind(this);
	this.putDataToBootstrap = function(aDataKeysArr, aResumeCallback=undefined) {
		// extracts data from cBtnStore.data and puts it into bootstrap's gEditorABData_Btn[aBtnId].data
		// any entry in aDataKeysArr that contains arrbuf is transferred
		// for putting data, aResumeCallback is optional
		
		var cSendData = {};
		var cTransfers = [];
		
		for (var i=0; i<aDataKeysArr.length; i++) {
			var cKey = aDataKeysArr[i];
			cSendData[cKey] = this.data[cKey];
			if (cKey.indexOf('arrbuf') > -1) {
				cTransfers.push(this.data[cKey]);
				this.data[cKey] = 'TRANSFERED'; // i dont have to do this, i just do this in case i look for this and go nuts when things dont work. i remember in past i had an arrbuf but it was transfered and so byteLength was 0 and i didnt realize it and was going nuts
			}
		}
		
		self.postMessageWithCallback(['putToData', aBtnId, cSendData, (cTransfers.length ? cTransfers : undefined)], function(aDataObj) {
			console.log('ok done putting data from worker to bootstrap for keys:', aDataKeysArr);
			if (aResumeCallback) {
				aResumeCallback();
			}
		}.bind(this));
	}.bind(this);
}
function deleteBtnStore(aBtnId) {
	delete gBtnStore[aBtnId];
}
// end - helpers for interaction with data in gEditorAB_*Data


// end - addon functionality

// start - common nativeshot helpers
function autogenScreenshotFileName(aDateGettime) {
	// no extension generated
	
	// Screenshot - Mmm DD, YYYY - hh:mm AM
	// Screenshot - Feb 25, 2016 - 5:04 AM
	
	var nowDate = new Date();
	if (aDateGettime) {
		nowDate = new Date(aDateGettime);
	}
	
	var Mmm = core.addon.l10n.dateFormat['month.' + (nowDate.getMonth() + 1) + '.Mmm'];
	var YYYY = nowDate.getFullYear();
	var DD = nowDate.getDate() - 1;
	
	var mm = nowDate.getMinutes();
	var hh = nowDate.getHours(); // 0 - 23
	var AM;
	if (hh < 12) {
		AM = 'AM';
	} else {
		AM = 'PM';
	}
	
	// adjust hh to 12 hour
	if (hh === 0) {
		hh = 12;
	} else if (hh > 12) {
		hh -= 12;
	}
	
	// prefix mm with 0
	if (mm < 10) {
		mm = '0' + mm;
	}
	
	return [formatStringFromName('screenshot', 'bootstrap'), ' - ', Mmm, ' ', DD, ', ', YYYY, ' ', hh, ':', mm, ' ', AM].join('');
}
function updateLog() {
	// start - do stuff here - promise_uploadAnonImgur
	if (!aVal.response.success) {
		reuploadFunc();
		return;
	}
	if (gColReuploadTimers[reuploadTimerId]) {
		delete gColReuploadTimers[reuploadTimerId];
	}
	
	var imgUrl = aVal.response.data.link;
	var deleteHash = aVal.response.data.deletehash; // at time of this writing jul 13 2015 the delete link is `'http://imgur.com/delete/' + deleteHash` (ie: http://imgur.com/delete/AxXkaRTpZILspsh)
	var imgId = aVal.response.data.id;
	
	var trans = Transferable(gEditor.gBrowserDOMWindow);
	trans.addDataFlavor('text/unicode');
	// We multiply the length of the string by 2, since it's stored in 2-byte UTF-16 format internally.
	trans.setTransferData('text/unicode', SupportsString(imgUrl), imgUrl.length * 2);
	
	Services.clipboard.setData(trans, null, Services.clipboard.kGlobalClipboard);
	
	// add in update to log file
	appendToHistoryLog('imguranon', {
		d: new Date().getTime(),
		x: deleteHash,
		n: imgId
	});
	
	gEditor.showNotif(myServices.sb.GetStringFromName('notif-title_anon-upload-ok'), myServices.sb.GetStringFromName('notif-body_clipboard-ok'));
	// end - do stuff here - promise_uploadAnonImgur
}
// start - common nativeshot helpers
function storeErrorDetsForBtnId(aBtnId, aXHR, aOperationName, aFHRResponse, aKnownErrorTxt) {
	// text to set if it turns out aFHRResponse or aXHR are failures statuses
	// for a nodata: btnId it will build a failStatusObj to return WITHOUT `msg:` key
	// for a btnId with data (meaning with btn), it will send the data to bootstrap and give the btn a button to click to see these details
	var cBtnStore = getBtnStore(aBtnId);
	
	
	cBtnStore.data.errordets = {};
	if (aXHR) {
		console.log('aXHR:', uneval(aXHR));
		cBtnStore.data.errordets = getDetailsFromXhrResponse(aXHR);
	}
	
	if (aFHRResponse) {
		cBtnStore.data.errordets = aFHRResponse;
	}
	
	cBtnStore.data.errordets.operation = aOperationName;
		
	if (!cBtnStore.noData) {
		cBtnStore.putDataToBootstrap(['errordets'], function() {
			self.postMessage(['updateAttnBar', aBtnId, {
				bTxt: aKnownErrorTxt ? aKnownErrorTxt + ' - Retry' : 'Unknown Error - Retry', // :l10n:
				bClick: 'retry',
				bType: 'menu-button',
				bMenu: [
					{
						cTxt: 'Show error details',  // :l10n:
						cClick: 'showerror'
					},
					{
						cTxt: 'Save to disk - Quick',  // :l10n:
						cClick: 'retry',
						menudata: 'save-quick'
					},
					{
						cTxt: 'Save to disk - Browse',  // :l10n:
						cClick: 'retry',
						menudata: 'save-browse'
					}
				]
			}]);
		});
	} else {
		var aFailStatusObj = {
			status: false,
			errordets: cBtnStore.data.errordets
		};
		if (aKnownErrorTxt) {
			aFailStatusObj.msg = aKnownErrorTxt;
		}
		return aFailStatusObj;
	}
}

// start - common helpers
function getDetailsFromXhrResponse(aXhrResponse) {
	var responseDetails = {};
	var getResponseKeys = ['status', 'statusText', 'response', 'responseText']; // the keys you want from the response
	
	for (var i=0; i<getResponseKeys.length; i++) {
		try {
			responseDetails[getResponseKeys[i]] = aXhrResponse[getResponseKeys[i]];
		} catch (ignore) {
			responseDetails[getResponseKeys[i]] = ':::NOIT - EXTRACTION FAILED';
		}
	}
	
	return responseDetails;
}

function writeThenDir(aPlatPath, aContents, aDirFrom, aOptions={}) {
	// tries to writeAtomic
	// if it fails due to dirs not existing, it creates the dir
	// then writes again
	// if fail again for whatever reason it throws
	
	var cOptionsDefaults = {
		encoding: 'utf-8',
		noOverwrite: false,
		// tmpPath: aPlatPath + '.tmp'
	}
	
	var do_write = function() {
		return OS.File.writeAtomic(aPlatPath, aContents, aOptions); // doing unixMode:0o4777 here doesn't work, i have to `OS.File.setPermissions(path_toFile, {unixMode:0o4777})` after the file is made
	};
	
	
	
	try {
		do_write();
	} catch (OSFileError) {
		if (OSFileError.becauseNoSuchFile) { // this happens when directories dont exist to it
			OS.File.makeDir(OS.Path.dirname(aPlatPath), {from:aDirFrom});
			do_write(); // if it fails this time it will throw outloud
		} else {
			throw OSFileError;
		}
	}
	
}
function Deferred() { // rev3 - https://gist.github.com/Noitidart/326f1282c780e3cb7390
	// update 062115 for typeof
	if (typeof(Promise) != 'undefined' && Promise.defer) {
		//need import of Promise.jsm for example: Cu.import('resource:/gree/modules/Promise.jsm');
		return Promise.defer();
	} else if (typeof(PromiseUtils) != 'undefined'  && PromiseUtils.defer) {
		//need import of PromiseUtils.jsm for example: Cu.import('resource:/gree/modules/PromiseUtils.jsm');
		return PromiseUtils.defer();
	} else {
		/* A method to resolve the associated Promise with the value passed.
		 * If the promise is already settled it does nothing.
		 *
		 * @param {anything} value : This value is used to resolve the promise
		 * If the value is a Promise then the associated promise assumes the state
		 * of Promise passed as value.
		 */
		this.resolve = null;

		/* A method to reject the assocaited Promise with the value passed.
		 * If the promise is already settled it does nothing.
		 *
		 * @param {anything} reason: The reason for the rejection of the Promise.
		 * Generally its an Error object. If however a Promise is passed, then the Promise
		 * itself will be the reason for rejection no matter the state of the Promise.
		 */
		this.reject = null;

		/* A newly created Pomise object.
		 * Initially in pending state.
		 */
		this.promise = new Promise(function(resolve, reject) {
			this.resolve = resolve;
			this.reject = reject;
		}.bind(this));
		Object.freeze(this);
	}
}
function genericReject(aPromiseName, aPromiseToReject, aReason) {
	var rejObj = {
		name: aPromiseName,
		aReason: aReason
	};
	console.error('Rejected - ' + aPromiseName + ' - ', rejObj);
	if (aPromiseToReject) {
		aPromiseToReject.reject(rejObj);
	}
}
function genericCatch(aPromiseName, aPromiseToReject, aCaught) {
	var rejObj = {
		name: aPromiseName,
		aCaught: aCaught
	};
	console.error('Caught - ' + aPromiseName + ' - ', rejObj);
	if (aPromiseToReject) {
		aPromiseToReject.reject(rejObj);
	}
}

// rev1 - https://gist.github.com/Noitidart/ec1e6b9a593ec7e3efed
function xhr(aUrlOrFileUri, aOptions={}) {
	// console.error('in xhr!!! aUrlOrFileUri:', aUrlOrFileUri);
	
	// all requests are sync - as this is in a worker
	var aOptionsDefaults = {
		responseType: 'text',
		timeout: 0, // integer, milliseconds, 0 means never timeout, value is in milliseconds
		headers: null, // make it an object of key value pairs
		method: 'GET', // string
		data: null // make it whatever you want (formdata, null, etc), but follow the rules, like if aMethod is 'GET' then this must be null
	};
	validateOptionsObj(aOptions, aOptionsDefaults);
	
	var cRequest = new XMLHttpRequest();
	
	cRequest.open(aOptions.method, aUrlOrFileUri, false); // 3rd arg is false for synchronus
	
	if (aOptions.headers) {
		for (var h in aOptions.headers) {
			cRequest.setRequestHeader(h, aOptions.headers[h]);
		}
	}
	
	cRequest.responseType = aOptions.responseType;
	cRequest.send(aOptions.data);
	
	// console.log('response:', cRequest.response);
	
	// console.error('done xhr!!!');
	return cRequest;
}

// rev1 - https://gist.github.com/Noitidart/c4ab4ca10ff5861c720b
function validateOptionsObj(aOptions, aOptionsDefaults) {
	// ensures no invalid keys are found in aOptions, any key found in aOptions not having a key in aOptionsDefaults causes throw new Error as invalid option
	for (var aOptKey in aOptions) {
		if (!(aOptKey in aOptionsDefaults)) {
			console.error('aOptKey of ' + aOptKey + ' is an invalid key, as it has no default value, aOptionsDefaults:', aOptionsDefaults, 'aOptions:', aOptions);
			throw new Error('aOptKey of ' + aOptKey + ' is an invalid key, as it has no default value');
		}
	}
	
	// if a key is not found in aOptions, but is found in aOptionsDefaults, it sets the key in aOptions to the default value
	for (var aOptKey in aOptionsDefaults) {
		if (!(aOptKey in aOptions)) {
			aOptions[aOptKey] = aOptionsDefaults[aOptKey];
		}
	}
}

// rev1 - https://gist.github.com/Noitidart/6c172e77fe48f78521f2
var jQLike = { // my stand alone jquery like functions
	serialize: function(aSerializeObject) {
		// https://api.jquery.com/serialize/

		// verified this by testing
			// http://www.w3schools.com/jquery/tryit.asp?filename=tryjquery_ajax_serialize
			// http://www.the-art-of-web.com/javascript/escape/

		var serializedStrArr = [];
		for (var cSerializeKey in aSerializeObject) {
			serializedStrArr.push(encodeURIComponent(cSerializeKey) + '=' + encodeURIComponent(aSerializeObject[cSerializeKey]));
		}
		return serializedStrArr.join('&');
	}
};

// rev4 - https://gist.github.com/Noitidart/6d8a20739b9a4a97bc47
var _cache_formatStringFromName_packages = {}; // holds imported packages
function formatStringFromName(aKey, aLocalizedPackageName, aReplacements) {
	// depends on ```core.addon.path.locale``` it must be set to the path to your locale folder

	// aLocalizedPackageName is name of the .properties file. so mainworker.properties you would provide mainworker // or if it includes chrome:// at the start then it fetches that
	// aKey - string for key in aLocalizedPackageName
	// aReplacements - array of string
	
	// returns null if aKey not found in pacakage

	var packagePath;
	var packageName;
	if (aLocalizedPackageName.indexOf('chrome:') === 0 || aLocalizedPackageName.indexOf('resource:') === 0) {
		packagePath = aLocalizedPackageName;
		packageName = aLocalizedPackageName.substring(aLocalizedPackageName.lastIndexOf('/') + 1, aLocalizedPackageName.indexOf('.properties'));
	} else {
		packagePath = core.addon.path.locale + aLocalizedPackageName + '.properties';
		packageName = aLocalizedPackageName;
	}
	
	if (!_cache_formatStringFromName_packages[packageName]) {
		var packageStr = xhr(packagePath).response;
		var packageJson = {};
		
		var propPatt = /(.*?)=(.*?)$/gm;
		var propMatch;
		while (propMatch = propPatt.exec(packageStr)) {
			packageJson[propMatch[1]] = propMatch[2];
		}
		
		_cache_formatStringFromName_packages[packageName] = packageJson;
		
		console.log('packageJson:', packageJson);
	}
	
	var cLocalizedStr = _cache_formatStringFromName_packages[packageName][aKey];
	if (!cLocalizedStr) {
		return null;
	}
	if (aReplacements) {
		for (var i=0; i<aReplacements.length; i++) {
			cLocalizedStr = cLocalizedStr.replace('%S', aReplacements[i]);
		}
	}
	
	return cLocalizedStr;
}
function setTimeoutSync(aMilliseconds) {
	var breakDate = Date.now() + aMilliseconds;
	while (Date.now() < breakDate) {}
}

function base64ArrayBuffer(arrayBuffer) {

// noit - i got this from - http://stackoverflow.com/a/9458996/1828637 - which led me to - https://gist.github.com/958841	
// Converts an ArrayBuffer directly to base64, without any intermediate 'convert to string then
// use window.btoa' step. According to my tests, this appears to be a faster approach:
// http://jsperf.com/encoding-xhr-image-data/5

  var base64    = ''
  var encodings = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'

  var bytes         = new Uint8Array(arrayBuffer)
  var byteLength    = bytes.byteLength
  var byteRemainder = byteLength % 3
  var mainLength    = byteLength - byteRemainder

  var a, b, c, d
  var chunk

  // Main loop deals with bytes in chunks of 3
  for (var i = 0; i < mainLength; i = i + 3) {
    // Combine the three bytes into a single integer
    chunk = (bytes[i] << 16) | (bytes[i + 1] << 8) | bytes[i + 2]

    // Use bitmasks to extract 6-bit segments from the triplet
    a = (chunk & 16515072) >> 18 // 16515072 = (2^6 - 1) << 18
    b = (chunk & 258048)   >> 12 // 258048   = (2^6 - 1) << 12
    c = (chunk & 4032)     >>  6 // 4032     = (2^6 - 1) << 6
    d = chunk & 63               // 63       = 2^6 - 1

    // Convert the raw binary segments to the appropriate ASCII encoding
    base64 += encodings[a] + encodings[b] + encodings[c] + encodings[d]
  }

  // Deal with the remaining bytes and padding
  if (byteRemainder == 1) {
    chunk = bytes[mainLength]

    a = (chunk & 252) >> 2 // 252 = (2^6 - 1) << 2

    // Set the 4 least significant bits to zero
    b = (chunk & 3)   << 4 // 3   = 2^2 - 1

    base64 += encodings[a] + encodings[b] + '=='
  } else if (byteRemainder == 2) {
    chunk = (bytes[mainLength] << 8) | bytes[mainLength + 1]

    a = (chunk & 64512) >> 10 // 64512 = (2^6 - 1) << 10
    b = (chunk & 1008)  >>  4 // 1008  = (2^6 - 1) << 4

    // Set the 2 least significant bits to zero
    c = (chunk & 15)    <<  2 // 15    = 2^4 - 1

    base64 += encodings[a] + encodings[b] + encodings[c] + '='
  }
  
  return base64
}
function platformFilePathSeperator() {
	// if (!_cache_platformFilePathSeperator) {
	// 	_cache_platformFilePathSeperator = OS.Path.join(' ', ' ').replace(/ /g, '');
	// }
	// return _cache_platformFilePathSeperator;
	return OS.Path.join(' ', ' ').replace(/ /g, '');
}
// rev2 - _ff-addon-snippet-safedForPlatFS.js - https://gist.github.com/Noitidart/e6dbbe47fbacc06eb4ca
var _safedForPlatFS_pattWIN = /([\\*:?<>|\/\"])/g;
var _safedForPlatFS_pattNIXMAC = /[\/:]/g;
function safedForPlatFS(aStr, aOptions={}) {
	// short for getSafedForPlatformFilesystem - meaning after running this on it, you can safely use the return in a filename on this current platform
	// aOptions
	//	repStr - use this string, in place of the default repCharForSafePath in place of non-platform safe characters
	//	allPlatSafe - by default it will return a path safed for the current OS. Set this to true if you want to to get a string that can be used on ALL platforms filesystems. A Windows path is safe on all other platforms
	
	// 022816 - i added : to _safedForPlatFS_pattNIXMAC because on mac it was replacing it with a `/` which is horrible it will screw up OS.Path.join .split etc
	
	// set defaults on aOptions
	if (!('allPlatSafe' in aOptions)) {
		aOptions.allPlatSafe = false;
	}
	if (!('repStr' in aOptions)) {
		aOptions.repStr = '-';
	}
	
	var usePlat = aOptions.allPlatSafe ? 'winnt' : core.os.name; // a windows path is safe in all platforms so force that. IF they dont want all platforms then use the current platform
	switch (usePlat) {
		case 'winnt':
		case 'winmo':
		case 'wince':
		
				return aStr.replace(_safedForPlatFS_pattWIN, aOptions.repStr);
				
			break;
		default:
		
				return aStr.replace(_safedForPlatFS_pattNIXMAC, aOptions.repStr);
	}
}
function spliceObj(obj1, obj2) {
	/**
	 * By reference. Adds all of obj2 keys to obj1. Overwriting any old values in obj1.
	 * Was previously called `usurpObjWithObj`
	 * @param obj1
	 * @param obj2
	 * @returns undefined
	 */
	for (var attrname in obj2) { obj1[attrname] = obj2[attrname]; }
}
function overwriteObjWithObj(obj1, obj2){
	/**
	 * No by reference. Creates a new object. With all the keys/values from obj2. Adds in the keys/values that are in obj1 that were not in obj2.
	 * @param obj1
	 * @param obj2
	 * @returns obj3 a new object based on obj1 and obj2
	 */

    var obj3 = {};
    for (var attrname in obj1) { obj3[attrname] = obj1[attrname]; }
    for (var attrname in obj2) { obj3[attrname] = obj2[attrname]; }
    return obj3;
}
// end - common helpers